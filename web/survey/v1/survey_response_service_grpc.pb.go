// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.2
// source: web/survey/v1/survey_response_service.proto

package grpcweb_survey_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SurveyResponseServiceClient is the client API for SurveyResponseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyResponseServiceClient interface {
	ResponseGetAll(ctx context.Context, in *ResponseGetAllRequest, opts ...grpc.CallOption) (*ResponseGetAllResponse, error)
	ResponseGetOne(ctx context.Context, in *ResponseGetOneRequest, opts ...grpc.CallOption) (*ResponseGetOneResponse, error)
	ResponseAnswerGetList(ctx context.Context, in *ResponseAnswerGetListRequest, opts ...grpc.CallOption) (*ResponseAnswerGetListResponse, error)
}

type surveyResponseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyResponseServiceClient(cc grpc.ClientConnInterface) SurveyResponseServiceClient {
	return &surveyResponseServiceClient{cc}
}

func (c *surveyResponseServiceClient) ResponseGetAll(ctx context.Context, in *ResponseGetAllRequest, opts ...grpc.CallOption) (*ResponseGetAllResponse, error) {
	out := new(ResponseGetAllResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyResponseService/ResponseGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyResponseServiceClient) ResponseGetOne(ctx context.Context, in *ResponseGetOneRequest, opts ...grpc.CallOption) (*ResponseGetOneResponse, error) {
	out := new(ResponseGetOneResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyResponseService/ResponseGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyResponseServiceClient) ResponseAnswerGetList(ctx context.Context, in *ResponseAnswerGetListRequest, opts ...grpc.CallOption) (*ResponseAnswerGetListResponse, error) {
	out := new(ResponseAnswerGetListResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyResponseService/ResponseAnswerGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyResponseServiceServer is the server API for SurveyResponseService service.
// All implementations must embed UnimplementedSurveyResponseServiceServer
// for forward compatibility
type SurveyResponseServiceServer interface {
	ResponseGetAll(context.Context, *ResponseGetAllRequest) (*ResponseGetAllResponse, error)
	ResponseGetOne(context.Context, *ResponseGetOneRequest) (*ResponseGetOneResponse, error)
	ResponseAnswerGetList(context.Context, *ResponseAnswerGetListRequest) (*ResponseAnswerGetListResponse, error)
	mustEmbedUnimplementedSurveyResponseServiceServer()
}

// UnimplementedSurveyResponseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyResponseServiceServer struct {
}

func (UnimplementedSurveyResponseServiceServer) ResponseGetAll(context.Context, *ResponseGetAllRequest) (*ResponseGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResponseGetAll not implemented")
}
func (UnimplementedSurveyResponseServiceServer) ResponseGetOne(context.Context, *ResponseGetOneRequest) (*ResponseGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResponseGetOne not implemented")
}
func (UnimplementedSurveyResponseServiceServer) ResponseAnswerGetList(context.Context, *ResponseAnswerGetListRequest) (*ResponseAnswerGetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResponseAnswerGetList not implemented")
}
func (UnimplementedSurveyResponseServiceServer) mustEmbedUnimplementedSurveyResponseServiceServer() {}

// UnsafeSurveyResponseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyResponseServiceServer will
// result in compilation errors.
type UnsafeSurveyResponseServiceServer interface {
	mustEmbedUnimplementedSurveyResponseServiceServer()
}

func RegisterSurveyResponseServiceServer(s grpc.ServiceRegistrar, srv SurveyResponseServiceServer) {
	s.RegisterService(&SurveyResponseService_ServiceDesc, srv)
}

func _SurveyResponseService_ResponseGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyResponseServiceServer).ResponseGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyResponseService/ResponseGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyResponseServiceServer).ResponseGetAll(ctx, req.(*ResponseGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyResponseService_ResponseGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyResponseServiceServer).ResponseGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyResponseService/ResponseGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyResponseServiceServer).ResponseGetOne(ctx, req.(*ResponseGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyResponseService_ResponseAnswerGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResponseAnswerGetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyResponseServiceServer).ResponseAnswerGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyResponseService/ResponseAnswerGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyResponseServiceServer).ResponseAnswerGetList(ctx, req.(*ResponseAnswerGetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyResponseService_ServiceDesc is the grpc.ServiceDesc for SurveyResponseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyResponseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "web.survey.v1.SurveyResponseService",
	HandlerType: (*SurveyResponseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResponseGetAll",
			Handler:    _SurveyResponseService_ResponseGetAll_Handler,
		},
		{
			MethodName: "ResponseGetOne",
			Handler:    _SurveyResponseService_ResponseGetOne_Handler,
		},
		{
			MethodName: "ResponseAnswerGetList",
			Handler:    _SurveyResponseService_ResponseAnswerGetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web/survey/v1/survey_response_service.proto",
}
