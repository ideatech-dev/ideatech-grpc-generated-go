// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.2
// source: web/survey/v1/survey_redirect.proto

package grpcweb_survey_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SurveyRedirectServiceClient is the client API for SurveyRedirectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyRedirectServiceClient interface {
	SurveyRedirectGetOne(ctx context.Context, in *SurveyRedirectGetOneRequest, opts ...grpc.CallOption) (*SurveyRedirectGetOneResponse, error)
	SurveyRedirectCreate(ctx context.Context, in *SurveyRedirectCreateRequest, opts ...grpc.CallOption) (*SurveyRedirectCreateResponse, error)
	SurveyRedirectUpdate(ctx context.Context, in *SurveyRedirectUpdateRequest, opts ...grpc.CallOption) (*SurveyRedirectUpdateResponse, error)
	SurveyRedirectDelete(ctx context.Context, in *SurveyRedirectDeleteRequest, opts ...grpc.CallOption) (*SurveyRedirectDeleteResponse, error)
}

type surveyRedirectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyRedirectServiceClient(cc grpc.ClientConnInterface) SurveyRedirectServiceClient {
	return &surveyRedirectServiceClient{cc}
}

func (c *surveyRedirectServiceClient) SurveyRedirectGetOne(ctx context.Context, in *SurveyRedirectGetOneRequest, opts ...grpc.CallOption) (*SurveyRedirectGetOneResponse, error) {
	out := new(SurveyRedirectGetOneResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyRedirectService/SurveyRedirectGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyRedirectServiceClient) SurveyRedirectCreate(ctx context.Context, in *SurveyRedirectCreateRequest, opts ...grpc.CallOption) (*SurveyRedirectCreateResponse, error) {
	out := new(SurveyRedirectCreateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyRedirectService/SurveyRedirectCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyRedirectServiceClient) SurveyRedirectUpdate(ctx context.Context, in *SurveyRedirectUpdateRequest, opts ...grpc.CallOption) (*SurveyRedirectUpdateResponse, error) {
	out := new(SurveyRedirectUpdateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyRedirectService/SurveyRedirectUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyRedirectServiceClient) SurveyRedirectDelete(ctx context.Context, in *SurveyRedirectDeleteRequest, opts ...grpc.CallOption) (*SurveyRedirectDeleteResponse, error) {
	out := new(SurveyRedirectDeleteResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyRedirectService/SurveyRedirectDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyRedirectServiceServer is the server API for SurveyRedirectService service.
// All implementations must embed UnimplementedSurveyRedirectServiceServer
// for forward compatibility
type SurveyRedirectServiceServer interface {
	SurveyRedirectGetOne(context.Context, *SurveyRedirectGetOneRequest) (*SurveyRedirectGetOneResponse, error)
	SurveyRedirectCreate(context.Context, *SurveyRedirectCreateRequest) (*SurveyRedirectCreateResponse, error)
	SurveyRedirectUpdate(context.Context, *SurveyRedirectUpdateRequest) (*SurveyRedirectUpdateResponse, error)
	SurveyRedirectDelete(context.Context, *SurveyRedirectDeleteRequest) (*SurveyRedirectDeleteResponse, error)
	mustEmbedUnimplementedSurveyRedirectServiceServer()
}

// UnimplementedSurveyRedirectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyRedirectServiceServer struct {
}

func (UnimplementedSurveyRedirectServiceServer) SurveyRedirectGetOne(context.Context, *SurveyRedirectGetOneRequest) (*SurveyRedirectGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SurveyRedirectGetOne not implemented")
}
func (UnimplementedSurveyRedirectServiceServer) SurveyRedirectCreate(context.Context, *SurveyRedirectCreateRequest) (*SurveyRedirectCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SurveyRedirectCreate not implemented")
}
func (UnimplementedSurveyRedirectServiceServer) SurveyRedirectUpdate(context.Context, *SurveyRedirectUpdateRequest) (*SurveyRedirectUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SurveyRedirectUpdate not implemented")
}
func (UnimplementedSurveyRedirectServiceServer) SurveyRedirectDelete(context.Context, *SurveyRedirectDeleteRequest) (*SurveyRedirectDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SurveyRedirectDelete not implemented")
}
func (UnimplementedSurveyRedirectServiceServer) mustEmbedUnimplementedSurveyRedirectServiceServer() {}

// UnsafeSurveyRedirectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyRedirectServiceServer will
// result in compilation errors.
type UnsafeSurveyRedirectServiceServer interface {
	mustEmbedUnimplementedSurveyRedirectServiceServer()
}

func RegisterSurveyRedirectServiceServer(s grpc.ServiceRegistrar, srv SurveyRedirectServiceServer) {
	s.RegisterService(&SurveyRedirectService_ServiceDesc, srv)
}

func _SurveyRedirectService_SurveyRedirectGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyRedirectGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyRedirectServiceServer).SurveyRedirectGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyRedirectService/SurveyRedirectGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyRedirectServiceServer).SurveyRedirectGetOne(ctx, req.(*SurveyRedirectGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyRedirectService_SurveyRedirectCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyRedirectCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyRedirectServiceServer).SurveyRedirectCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyRedirectService/SurveyRedirectCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyRedirectServiceServer).SurveyRedirectCreate(ctx, req.(*SurveyRedirectCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyRedirectService_SurveyRedirectUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyRedirectUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyRedirectServiceServer).SurveyRedirectUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyRedirectService/SurveyRedirectUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyRedirectServiceServer).SurveyRedirectUpdate(ctx, req.(*SurveyRedirectUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyRedirectService_SurveyRedirectDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyRedirectDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyRedirectServiceServer).SurveyRedirectDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyRedirectService/SurveyRedirectDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyRedirectServiceServer).SurveyRedirectDelete(ctx, req.(*SurveyRedirectDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyRedirectService_ServiceDesc is the grpc.ServiceDesc for SurveyRedirectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyRedirectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "web.survey.v1.SurveyRedirectService",
	HandlerType: (*SurveyRedirectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SurveyRedirectGetOne",
			Handler:    _SurveyRedirectService_SurveyRedirectGetOne_Handler,
		},
		{
			MethodName: "SurveyRedirectCreate",
			Handler:    _SurveyRedirectService_SurveyRedirectCreate_Handler,
		},
		{
			MethodName: "SurveyRedirectUpdate",
			Handler:    _SurveyRedirectService_SurveyRedirectUpdate_Handler,
		},
		{
			MethodName: "SurveyRedirectDelete",
			Handler:    _SurveyRedirectService_SurveyRedirectDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web/survey/v1/survey_redirect.proto",
}
