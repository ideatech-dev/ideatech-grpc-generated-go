// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.2
// source: web/survey/v1/survey_logic_service.proto

package grpcweb_survey_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SurveyLogicPageServiceClient is the client API for SurveyLogicPageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyLogicPageServiceClient interface {
	LogicPageSourceGetList(ctx context.Context, in *LogicPageSourceGetListRequest, opts ...grpc.CallOption) (*LogicPageSourceGetListResponse, error)
	LogicPageSourceCreate(ctx context.Context, in *LogicPageSourceCreateRequest, opts ...grpc.CallOption) (*LogicPageSourceCreateResponse, error)
	LogicPageSourceUpdate(ctx context.Context, in *LogicPageSourceUpdateRequest, opts ...grpc.CallOption) (*LogicPageSourceUpdateResponse, error)
	LogicPageSourceDelete(ctx context.Context, in *LogicPageSourceDeleteRequest, opts ...grpc.CallOption) (*LogicPageSourceDeleteResponse, error)
	LogicPageGateGetList(ctx context.Context, in *LogicPageGateGetListRequest, opts ...grpc.CallOption) (*LogicPageGateGetListResponse, error)
	LogicPageGateCreate(ctx context.Context, in *LogicPageGateCreateRequest, opts ...grpc.CallOption) (*LogicPageGateCreateResponse, error)
	LogicPageGateUpdate(ctx context.Context, in *LogicPageGateUpdateRequest, opts ...grpc.CallOption) (*LogicPageGateUpdateResponse, error)
	LogicPageGateDelete(ctx context.Context, in *LogicPageGateDeleteRequest, opts ...grpc.CallOption) (*LogicPageGateDeleteResponse, error)
	LogicPageActionGetList(ctx context.Context, in *LogicPageActionGetListRequest, opts ...grpc.CallOption) (*LogicPageActionGetListResponse, error)
	LogicPageActionCreate(ctx context.Context, in *LogicPageActionCreateRequest, opts ...grpc.CallOption) (*LogicPageActionCreateResponse, error)
	LogicPageActionUpdate(ctx context.Context, in *LogicPageActionUpdateRequest, opts ...grpc.CallOption) (*LogicPageActionUpdateResponse, error)
	LogicPageActionDelete(ctx context.Context, in *LogicPageActionDeleteRequest, opts ...grpc.CallOption) (*LogicPageActionDeleteResponse, error)
}

type surveyLogicPageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyLogicPageServiceClient(cc grpc.ClientConnInterface) SurveyLogicPageServiceClient {
	return &surveyLogicPageServiceClient{cc}
}

func (c *surveyLogicPageServiceClient) LogicPageSourceGetList(ctx context.Context, in *LogicPageSourceGetListRequest, opts ...grpc.CallOption) (*LogicPageSourceGetListResponse, error) {
	out := new(LogicPageSourceGetListResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyLogicPageService/LogicPageSourceGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyLogicPageServiceClient) LogicPageSourceCreate(ctx context.Context, in *LogicPageSourceCreateRequest, opts ...grpc.CallOption) (*LogicPageSourceCreateResponse, error) {
	out := new(LogicPageSourceCreateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyLogicPageService/LogicPageSourceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyLogicPageServiceClient) LogicPageSourceUpdate(ctx context.Context, in *LogicPageSourceUpdateRequest, opts ...grpc.CallOption) (*LogicPageSourceUpdateResponse, error) {
	out := new(LogicPageSourceUpdateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyLogicPageService/LogicPageSourceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyLogicPageServiceClient) LogicPageSourceDelete(ctx context.Context, in *LogicPageSourceDeleteRequest, opts ...grpc.CallOption) (*LogicPageSourceDeleteResponse, error) {
	out := new(LogicPageSourceDeleteResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyLogicPageService/LogicPageSourceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyLogicPageServiceClient) LogicPageGateGetList(ctx context.Context, in *LogicPageGateGetListRequest, opts ...grpc.CallOption) (*LogicPageGateGetListResponse, error) {
	out := new(LogicPageGateGetListResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyLogicPageService/LogicPageGateGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyLogicPageServiceClient) LogicPageGateCreate(ctx context.Context, in *LogicPageGateCreateRequest, opts ...grpc.CallOption) (*LogicPageGateCreateResponse, error) {
	out := new(LogicPageGateCreateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyLogicPageService/LogicPageGateCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyLogicPageServiceClient) LogicPageGateUpdate(ctx context.Context, in *LogicPageGateUpdateRequest, opts ...grpc.CallOption) (*LogicPageGateUpdateResponse, error) {
	out := new(LogicPageGateUpdateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyLogicPageService/LogicPageGateUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyLogicPageServiceClient) LogicPageGateDelete(ctx context.Context, in *LogicPageGateDeleteRequest, opts ...grpc.CallOption) (*LogicPageGateDeleteResponse, error) {
	out := new(LogicPageGateDeleteResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyLogicPageService/LogicPageGateDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyLogicPageServiceClient) LogicPageActionGetList(ctx context.Context, in *LogicPageActionGetListRequest, opts ...grpc.CallOption) (*LogicPageActionGetListResponse, error) {
	out := new(LogicPageActionGetListResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyLogicPageService/LogicPageActionGetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyLogicPageServiceClient) LogicPageActionCreate(ctx context.Context, in *LogicPageActionCreateRequest, opts ...grpc.CallOption) (*LogicPageActionCreateResponse, error) {
	out := new(LogicPageActionCreateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyLogicPageService/LogicPageActionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyLogicPageServiceClient) LogicPageActionUpdate(ctx context.Context, in *LogicPageActionUpdateRequest, opts ...grpc.CallOption) (*LogicPageActionUpdateResponse, error) {
	out := new(LogicPageActionUpdateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyLogicPageService/LogicPageActionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyLogicPageServiceClient) LogicPageActionDelete(ctx context.Context, in *LogicPageActionDeleteRequest, opts ...grpc.CallOption) (*LogicPageActionDeleteResponse, error) {
	out := new(LogicPageActionDeleteResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyLogicPageService/LogicPageActionDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyLogicPageServiceServer is the server API for SurveyLogicPageService service.
// All implementations must embed UnimplementedSurveyLogicPageServiceServer
// for forward compatibility
type SurveyLogicPageServiceServer interface {
	LogicPageSourceGetList(context.Context, *LogicPageSourceGetListRequest) (*LogicPageSourceGetListResponse, error)
	LogicPageSourceCreate(context.Context, *LogicPageSourceCreateRequest) (*LogicPageSourceCreateResponse, error)
	LogicPageSourceUpdate(context.Context, *LogicPageSourceUpdateRequest) (*LogicPageSourceUpdateResponse, error)
	LogicPageSourceDelete(context.Context, *LogicPageSourceDeleteRequest) (*LogicPageSourceDeleteResponse, error)
	LogicPageGateGetList(context.Context, *LogicPageGateGetListRequest) (*LogicPageGateGetListResponse, error)
	LogicPageGateCreate(context.Context, *LogicPageGateCreateRequest) (*LogicPageGateCreateResponse, error)
	LogicPageGateUpdate(context.Context, *LogicPageGateUpdateRequest) (*LogicPageGateUpdateResponse, error)
	LogicPageGateDelete(context.Context, *LogicPageGateDeleteRequest) (*LogicPageGateDeleteResponse, error)
	LogicPageActionGetList(context.Context, *LogicPageActionGetListRequest) (*LogicPageActionGetListResponse, error)
	LogicPageActionCreate(context.Context, *LogicPageActionCreateRequest) (*LogicPageActionCreateResponse, error)
	LogicPageActionUpdate(context.Context, *LogicPageActionUpdateRequest) (*LogicPageActionUpdateResponse, error)
	LogicPageActionDelete(context.Context, *LogicPageActionDeleteRequest) (*LogicPageActionDeleteResponse, error)
	mustEmbedUnimplementedSurveyLogicPageServiceServer()
}

// UnimplementedSurveyLogicPageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyLogicPageServiceServer struct {
}

func (UnimplementedSurveyLogicPageServiceServer) LogicPageSourceGetList(context.Context, *LogicPageSourceGetListRequest) (*LogicPageSourceGetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicPageSourceGetList not implemented")
}
func (UnimplementedSurveyLogicPageServiceServer) LogicPageSourceCreate(context.Context, *LogicPageSourceCreateRequest) (*LogicPageSourceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicPageSourceCreate not implemented")
}
func (UnimplementedSurveyLogicPageServiceServer) LogicPageSourceUpdate(context.Context, *LogicPageSourceUpdateRequest) (*LogicPageSourceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicPageSourceUpdate not implemented")
}
func (UnimplementedSurveyLogicPageServiceServer) LogicPageSourceDelete(context.Context, *LogicPageSourceDeleteRequest) (*LogicPageSourceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicPageSourceDelete not implemented")
}
func (UnimplementedSurveyLogicPageServiceServer) LogicPageGateGetList(context.Context, *LogicPageGateGetListRequest) (*LogicPageGateGetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicPageGateGetList not implemented")
}
func (UnimplementedSurveyLogicPageServiceServer) LogicPageGateCreate(context.Context, *LogicPageGateCreateRequest) (*LogicPageGateCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicPageGateCreate not implemented")
}
func (UnimplementedSurveyLogicPageServiceServer) LogicPageGateUpdate(context.Context, *LogicPageGateUpdateRequest) (*LogicPageGateUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicPageGateUpdate not implemented")
}
func (UnimplementedSurveyLogicPageServiceServer) LogicPageGateDelete(context.Context, *LogicPageGateDeleteRequest) (*LogicPageGateDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicPageGateDelete not implemented")
}
func (UnimplementedSurveyLogicPageServiceServer) LogicPageActionGetList(context.Context, *LogicPageActionGetListRequest) (*LogicPageActionGetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicPageActionGetList not implemented")
}
func (UnimplementedSurveyLogicPageServiceServer) LogicPageActionCreate(context.Context, *LogicPageActionCreateRequest) (*LogicPageActionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicPageActionCreate not implemented")
}
func (UnimplementedSurveyLogicPageServiceServer) LogicPageActionUpdate(context.Context, *LogicPageActionUpdateRequest) (*LogicPageActionUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicPageActionUpdate not implemented")
}
func (UnimplementedSurveyLogicPageServiceServer) LogicPageActionDelete(context.Context, *LogicPageActionDeleteRequest) (*LogicPageActionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogicPageActionDelete not implemented")
}
func (UnimplementedSurveyLogicPageServiceServer) mustEmbedUnimplementedSurveyLogicPageServiceServer() {
}

// UnsafeSurveyLogicPageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyLogicPageServiceServer will
// result in compilation errors.
type UnsafeSurveyLogicPageServiceServer interface {
	mustEmbedUnimplementedSurveyLogicPageServiceServer()
}

func RegisterSurveyLogicPageServiceServer(s grpc.ServiceRegistrar, srv SurveyLogicPageServiceServer) {
	s.RegisterService(&SurveyLogicPageService_ServiceDesc, srv)
}

func _SurveyLogicPageService_LogicPageSourceGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicPageSourceGetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyLogicPageServiceServer).LogicPageSourceGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyLogicPageService/LogicPageSourceGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyLogicPageServiceServer).LogicPageSourceGetList(ctx, req.(*LogicPageSourceGetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyLogicPageService_LogicPageSourceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicPageSourceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyLogicPageServiceServer).LogicPageSourceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyLogicPageService/LogicPageSourceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyLogicPageServiceServer).LogicPageSourceCreate(ctx, req.(*LogicPageSourceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyLogicPageService_LogicPageSourceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicPageSourceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyLogicPageServiceServer).LogicPageSourceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyLogicPageService/LogicPageSourceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyLogicPageServiceServer).LogicPageSourceUpdate(ctx, req.(*LogicPageSourceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyLogicPageService_LogicPageSourceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicPageSourceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyLogicPageServiceServer).LogicPageSourceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyLogicPageService/LogicPageSourceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyLogicPageServiceServer).LogicPageSourceDelete(ctx, req.(*LogicPageSourceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyLogicPageService_LogicPageGateGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicPageGateGetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyLogicPageServiceServer).LogicPageGateGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyLogicPageService/LogicPageGateGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyLogicPageServiceServer).LogicPageGateGetList(ctx, req.(*LogicPageGateGetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyLogicPageService_LogicPageGateCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicPageGateCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyLogicPageServiceServer).LogicPageGateCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyLogicPageService/LogicPageGateCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyLogicPageServiceServer).LogicPageGateCreate(ctx, req.(*LogicPageGateCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyLogicPageService_LogicPageGateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicPageGateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyLogicPageServiceServer).LogicPageGateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyLogicPageService/LogicPageGateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyLogicPageServiceServer).LogicPageGateUpdate(ctx, req.(*LogicPageGateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyLogicPageService_LogicPageGateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicPageGateDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyLogicPageServiceServer).LogicPageGateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyLogicPageService/LogicPageGateDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyLogicPageServiceServer).LogicPageGateDelete(ctx, req.(*LogicPageGateDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyLogicPageService_LogicPageActionGetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicPageActionGetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyLogicPageServiceServer).LogicPageActionGetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyLogicPageService/LogicPageActionGetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyLogicPageServiceServer).LogicPageActionGetList(ctx, req.(*LogicPageActionGetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyLogicPageService_LogicPageActionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicPageActionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyLogicPageServiceServer).LogicPageActionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyLogicPageService/LogicPageActionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyLogicPageServiceServer).LogicPageActionCreate(ctx, req.(*LogicPageActionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyLogicPageService_LogicPageActionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicPageActionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyLogicPageServiceServer).LogicPageActionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyLogicPageService/LogicPageActionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyLogicPageServiceServer).LogicPageActionUpdate(ctx, req.(*LogicPageActionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyLogicPageService_LogicPageActionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogicPageActionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyLogicPageServiceServer).LogicPageActionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyLogicPageService/LogicPageActionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyLogicPageServiceServer).LogicPageActionDelete(ctx, req.(*LogicPageActionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyLogicPageService_ServiceDesc is the grpc.ServiceDesc for SurveyLogicPageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyLogicPageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "web.survey.v1.SurveyLogicPageService",
	HandlerType: (*SurveyLogicPageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogicPageSourceGetList",
			Handler:    _SurveyLogicPageService_LogicPageSourceGetList_Handler,
		},
		{
			MethodName: "LogicPageSourceCreate",
			Handler:    _SurveyLogicPageService_LogicPageSourceCreate_Handler,
		},
		{
			MethodName: "LogicPageSourceUpdate",
			Handler:    _SurveyLogicPageService_LogicPageSourceUpdate_Handler,
		},
		{
			MethodName: "LogicPageSourceDelete",
			Handler:    _SurveyLogicPageService_LogicPageSourceDelete_Handler,
		},
		{
			MethodName: "LogicPageGateGetList",
			Handler:    _SurveyLogicPageService_LogicPageGateGetList_Handler,
		},
		{
			MethodName: "LogicPageGateCreate",
			Handler:    _SurveyLogicPageService_LogicPageGateCreate_Handler,
		},
		{
			MethodName: "LogicPageGateUpdate",
			Handler:    _SurveyLogicPageService_LogicPageGateUpdate_Handler,
		},
		{
			MethodName: "LogicPageGateDelete",
			Handler:    _SurveyLogicPageService_LogicPageGateDelete_Handler,
		},
		{
			MethodName: "LogicPageActionGetList",
			Handler:    _SurveyLogicPageService_LogicPageActionGetList_Handler,
		},
		{
			MethodName: "LogicPageActionCreate",
			Handler:    _SurveyLogicPageService_LogicPageActionCreate_Handler,
		},
		{
			MethodName: "LogicPageActionUpdate",
			Handler:    _SurveyLogicPageService_LogicPageActionUpdate_Handler,
		},
		{
			MethodName: "LogicPageActionDelete",
			Handler:    _SurveyLogicPageService_LogicPageActionDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web/survey/v1/survey_logic_service.proto",
}
