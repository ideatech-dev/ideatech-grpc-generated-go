// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.2
// source: web/survey/v1/survey_service.proto

package grpcweb_survey_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SurveyServiceClient is the client API for SurveyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyServiceClient interface {
	SurveyGetOne(ctx context.Context, in *SurveyGetOneRequest, opts ...grpc.CallOption) (*SurveyGetOneResponse, error)
	SurveyGetAll(ctx context.Context, in *SurveyGetAllRequest, opts ...grpc.CallOption) (*SurveyGetAllResponse, error)
	SurveyCreate(ctx context.Context, in *SurveyCreateRequest, opts ...grpc.CallOption) (*SurveyCreateResponse, error)
	SurveyUpdate(ctx context.Context, in *SurveyUpdateRequest, opts ...grpc.CallOption) (*SurveyUpdateResponse, error)
	SurveyDelete(ctx context.Context, in *SurveyDeleteRequest, opts ...grpc.CallOption) (*SurveyDeleteResponse, error)
}

type surveyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyServiceClient(cc grpc.ClientConnInterface) SurveyServiceClient {
	return &surveyServiceClient{cc}
}

func (c *surveyServiceClient) SurveyGetOne(ctx context.Context, in *SurveyGetOneRequest, opts ...grpc.CallOption) (*SurveyGetOneResponse, error) {
	out := new(SurveyGetOneResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyService/SurveyGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) SurveyGetAll(ctx context.Context, in *SurveyGetAllRequest, opts ...grpc.CallOption) (*SurveyGetAllResponse, error) {
	out := new(SurveyGetAllResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyService/SurveyGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) SurveyCreate(ctx context.Context, in *SurveyCreateRequest, opts ...grpc.CallOption) (*SurveyCreateResponse, error) {
	out := new(SurveyCreateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyService/SurveyCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) SurveyUpdate(ctx context.Context, in *SurveyUpdateRequest, opts ...grpc.CallOption) (*SurveyUpdateResponse, error) {
	out := new(SurveyUpdateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyService/SurveyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyServiceClient) SurveyDelete(ctx context.Context, in *SurveyDeleteRequest, opts ...grpc.CallOption) (*SurveyDeleteResponse, error) {
	out := new(SurveyDeleteResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyService/SurveyDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyServiceServer is the server API for SurveyService service.
// All implementations must embed UnimplementedSurveyServiceServer
// for forward compatibility
type SurveyServiceServer interface {
	SurveyGetOne(context.Context, *SurveyGetOneRequest) (*SurveyGetOneResponse, error)
	SurveyGetAll(context.Context, *SurveyGetAllRequest) (*SurveyGetAllResponse, error)
	SurveyCreate(context.Context, *SurveyCreateRequest) (*SurveyCreateResponse, error)
	SurveyUpdate(context.Context, *SurveyUpdateRequest) (*SurveyUpdateResponse, error)
	SurveyDelete(context.Context, *SurveyDeleteRequest) (*SurveyDeleteResponse, error)
	mustEmbedUnimplementedSurveyServiceServer()
}

// UnimplementedSurveyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyServiceServer struct {
}

func (UnimplementedSurveyServiceServer) SurveyGetOne(context.Context, *SurveyGetOneRequest) (*SurveyGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SurveyGetOne not implemented")
}
func (UnimplementedSurveyServiceServer) SurveyGetAll(context.Context, *SurveyGetAllRequest) (*SurveyGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SurveyGetAll not implemented")
}
func (UnimplementedSurveyServiceServer) SurveyCreate(context.Context, *SurveyCreateRequest) (*SurveyCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SurveyCreate not implemented")
}
func (UnimplementedSurveyServiceServer) SurveyUpdate(context.Context, *SurveyUpdateRequest) (*SurveyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SurveyUpdate not implemented")
}
func (UnimplementedSurveyServiceServer) SurveyDelete(context.Context, *SurveyDeleteRequest) (*SurveyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SurveyDelete not implemented")
}
func (UnimplementedSurveyServiceServer) mustEmbedUnimplementedSurveyServiceServer() {}

// UnsafeSurveyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyServiceServer will
// result in compilation errors.
type UnsafeSurveyServiceServer interface {
	mustEmbedUnimplementedSurveyServiceServer()
}

func RegisterSurveyServiceServer(s grpc.ServiceRegistrar, srv SurveyServiceServer) {
	s.RegisterService(&SurveyService_ServiceDesc, srv)
}

func _SurveyService_SurveyGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).SurveyGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyService/SurveyGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).SurveyGetOne(ctx, req.(*SurveyGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_SurveyGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).SurveyGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyService/SurveyGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).SurveyGetAll(ctx, req.(*SurveyGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_SurveyCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).SurveyCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyService/SurveyCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).SurveyCreate(ctx, req.(*SurveyCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_SurveyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).SurveyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyService/SurveyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).SurveyUpdate(ctx, req.(*SurveyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyService_SurveyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyServiceServer).SurveyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyService/SurveyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyServiceServer).SurveyDelete(ctx, req.(*SurveyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyService_ServiceDesc is the grpc.ServiceDesc for SurveyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "web.survey.v1.SurveyService",
	HandlerType: (*SurveyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SurveyGetOne",
			Handler:    _SurveyService_SurveyGetOne_Handler,
		},
		{
			MethodName: "SurveyGetAll",
			Handler:    _SurveyService_SurveyGetAll_Handler,
		},
		{
			MethodName: "SurveyCreate",
			Handler:    _SurveyService_SurveyCreate_Handler,
		},
		{
			MethodName: "SurveyUpdate",
			Handler:    _SurveyService_SurveyUpdate_Handler,
		},
		{
			MethodName: "SurveyDelete",
			Handler:    _SurveyService_SurveyDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web/survey/v1/survey_service.proto",
}
