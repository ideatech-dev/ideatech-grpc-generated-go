// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.15.2
// source: web/survey/v1/survey_logic_service.proto

package grpcweb_survey_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogicPageSourceGetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId int32 `protobuf:"varint,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
}

func (x *LogicPageSourceGetListRequest) Reset() {
	*x = LogicPageSourceGetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageSourceGetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageSourceGetListRequest) ProtoMessage() {}

func (x *LogicPageSourceGetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageSourceGetListRequest.ProtoReflect.Descriptor instead.
func (*LogicPageSourceGetListRequest) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{0}
}

func (x *LogicPageSourceGetListRequest) GetPageId() int32 {
	if x != nil {
		return x.PageId
	}
	return 0
}

type LogicPageSourceGetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageSources []*SurveyLogicPageSource `protobuf:"bytes,1,rep,name=logic_page_sources,json=logicPageSources,proto3" json:"logic_page_sources,omitempty"`
}

func (x *LogicPageSourceGetListResponse) Reset() {
	*x = LogicPageSourceGetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageSourceGetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageSourceGetListResponse) ProtoMessage() {}

func (x *LogicPageSourceGetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageSourceGetListResponse.ProtoReflect.Descriptor instead.
func (*LogicPageSourceGetListResponse) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{1}
}

func (x *LogicPageSourceGetListResponse) GetLogicPageSources() []*SurveyLogicPageSource {
	if x != nil {
		return x.LogicPageSources
	}
	return nil
}

type LogicPageSourceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId int32  `protobuf:"varint,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Name   string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Payload
	Comparison     SurveyLogicPageSourceComparisonType `protobuf:"varint,2,opt,name=comparison,proto3,enum=web.survey.v1.SurveyLogicPageSourceComparisonType" json:"comparison,omitempty"`
	Value          string                              `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	FromQuestionId int32                               `protobuf:"varint,4,opt,name=from_question_id,json=fromQuestionId,proto3" json:"from_question_id,omitempty"`
}

func (x *LogicPageSourceCreateRequest) Reset() {
	*x = LogicPageSourceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageSourceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageSourceCreateRequest) ProtoMessage() {}

func (x *LogicPageSourceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageSourceCreateRequest.ProtoReflect.Descriptor instead.
func (*LogicPageSourceCreateRequest) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{2}
}

func (x *LogicPageSourceCreateRequest) GetPageId() int32 {
	if x != nil {
		return x.PageId
	}
	return 0
}

func (x *LogicPageSourceCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogicPageSourceCreateRequest) GetComparison() SurveyLogicPageSourceComparisonType {
	if x != nil {
		return x.Comparison
	}
	return SurveyLogicPageSourceComparisonType_LOGIC_PAGE_SOURCE_COMPARISON_ALL_UNSPECIFIED
}

func (x *LogicPageSourceCreateRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LogicPageSourceCreateRequest) GetFromQuestionId() int32 {
	if x != nil {
		return x.FromQuestionId
	}
	return 0
}

type LogicPageSourceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageSource *SurveyLogicPageSource `protobuf:"bytes,1,opt,name=logic_page_source,json=logicPageSource,proto3" json:"logic_page_source,omitempty"`
}

func (x *LogicPageSourceCreateResponse) Reset() {
	*x = LogicPageSourceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageSourceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageSourceCreateResponse) ProtoMessage() {}

func (x *LogicPageSourceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageSourceCreateResponse.ProtoReflect.Descriptor instead.
func (*LogicPageSourceCreateResponse) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{3}
}

func (x *LogicPageSourceCreateResponse) GetLogicPageSource() *SurveyLogicPageSource {
	if x != nil {
		return x.LogicPageSource
	}
	return nil
}

type LogicPageSourceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageSourceId int32  `protobuf:"varint,1,opt,name=logic_page_source_id,json=logicPageSourceId,proto3" json:"logic_page_source_id,omitempty"`
	Name              string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Payload
	Comparison     SurveyLogicPageSourceComparisonType `protobuf:"varint,2,opt,name=comparison,proto3,enum=web.survey.v1.SurveyLogicPageSourceComparisonType" json:"comparison,omitempty"`
	Value          string                              `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	FromQuestionId int32                               `protobuf:"varint,4,opt,name=from_question_id,json=fromQuestionId,proto3" json:"from_question_id,omitempty"`
}

func (x *LogicPageSourceUpdateRequest) Reset() {
	*x = LogicPageSourceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageSourceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageSourceUpdateRequest) ProtoMessage() {}

func (x *LogicPageSourceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageSourceUpdateRequest.ProtoReflect.Descriptor instead.
func (*LogicPageSourceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{4}
}

func (x *LogicPageSourceUpdateRequest) GetLogicPageSourceId() int32 {
	if x != nil {
		return x.LogicPageSourceId
	}
	return 0
}

func (x *LogicPageSourceUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogicPageSourceUpdateRequest) GetComparison() SurveyLogicPageSourceComparisonType {
	if x != nil {
		return x.Comparison
	}
	return SurveyLogicPageSourceComparisonType_LOGIC_PAGE_SOURCE_COMPARISON_ALL_UNSPECIFIED
}

func (x *LogicPageSourceUpdateRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *LogicPageSourceUpdateRequest) GetFromQuestionId() int32 {
	if x != nil {
		return x.FromQuestionId
	}
	return 0
}

type LogicPageSourceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageSource *SurveyLogicPageSource `protobuf:"bytes,1,opt,name=logic_page_source,json=logicPageSource,proto3" json:"logic_page_source,omitempty"`
}

func (x *LogicPageSourceUpdateResponse) Reset() {
	*x = LogicPageSourceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageSourceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageSourceUpdateResponse) ProtoMessage() {}

func (x *LogicPageSourceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageSourceUpdateResponse.ProtoReflect.Descriptor instead.
func (*LogicPageSourceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{5}
}

func (x *LogicPageSourceUpdateResponse) GetLogicPageSource() *SurveyLogicPageSource {
	if x != nil {
		return x.LogicPageSource
	}
	return nil
}

type LogicPageSourceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageSourceId int32 `protobuf:"varint,1,opt,name=logic_page_source_id,json=logicPageSourceId,proto3" json:"logic_page_source_id,omitempty"`
}

func (x *LogicPageSourceDeleteRequest) Reset() {
	*x = LogicPageSourceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageSourceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageSourceDeleteRequest) ProtoMessage() {}

func (x *LogicPageSourceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageSourceDeleteRequest.ProtoReflect.Descriptor instead.
func (*LogicPageSourceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{6}
}

func (x *LogicPageSourceDeleteRequest) GetLogicPageSourceId() int32 {
	if x != nil {
		return x.LogicPageSourceId
	}
	return 0
}

type LogicPageSourceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogicPageSourceDeleteResponse) Reset() {
	*x = LogicPageSourceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageSourceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageSourceDeleteResponse) ProtoMessage() {}

func (x *LogicPageSourceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageSourceDeleteResponse.ProtoReflect.Descriptor instead.
func (*LogicPageSourceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{7}
}

type LogicPageGateGetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId int32 `protobuf:"varint,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
}

func (x *LogicPageGateGetListRequest) Reset() {
	*x = LogicPageGateGetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageGateGetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageGateGetListRequest) ProtoMessage() {}

func (x *LogicPageGateGetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageGateGetListRequest.ProtoReflect.Descriptor instead.
func (*LogicPageGateGetListRequest) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{8}
}

func (x *LogicPageGateGetListRequest) GetPageId() int32 {
	if x != nil {
		return x.PageId
	}
	return 0
}

type LogicPageGateGetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageGates []*SurveyLogicPageGate `protobuf:"bytes,1,rep,name=logic_page_gates,json=logicPageGates,proto3" json:"logic_page_gates,omitempty"`
}

func (x *LogicPageGateGetListResponse) Reset() {
	*x = LogicPageGateGetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageGateGetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageGateGetListResponse) ProtoMessage() {}

func (x *LogicPageGateGetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageGateGetListResponse.ProtoReflect.Descriptor instead.
func (*LogicPageGateGetListResponse) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{9}
}

func (x *LogicPageGateGetListResponse) GetLogicPageGates() []*SurveyLogicPageGate {
	if x != nil {
		return x.LogicPageGates
	}
	return nil
}

type LogicPageGateCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId int32  `protobuf:"varint,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Name   string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// Payload
	Comparison              SurveyLogicPageGateComparisonType `protobuf:"varint,2,opt,name=comparison,proto3,enum=web.survey.v1.SurveyLogicPageGateComparisonType" json:"comparison,omitempty"`
	From_1Selector          SurveyLogicPageGateFromType       `protobuf:"varint,3,opt,name=from_1_selector,json=from1Selector,proto3,enum=web.survey.v1.SurveyLogicPageGateFromType" json:"from_1_selector,omitempty"`
	From_1LogicPageSourceId int32                             `protobuf:"varint,4,opt,name=from_1_logic_page_source_id,json=from1LogicPageSourceId,proto3" json:"from_1_logic_page_source_id,omitempty"`
	From_1LogicPageGateId   int32                             `protobuf:"varint,5,opt,name=from_1_logic_page_gate_id,json=from1LogicPageGateId,proto3" json:"from_1_logic_page_gate_id,omitempty"`
	From_2Selector          SurveyLogicPageGateFromType       `protobuf:"varint,6,opt,name=from_2_selector,json=from2Selector,proto3,enum=web.survey.v1.SurveyLogicPageGateFromType" json:"from_2_selector,omitempty"`
	From_2LogicPageSourceId int32                             `protobuf:"varint,7,opt,name=from_2_logic_page_source_id,json=from2LogicPageSourceId,proto3" json:"from_2_logic_page_source_id,omitempty"`
	From_2LogicPageGateId   int32                             `protobuf:"varint,8,opt,name=from_2_logic_page_gate_id,json=from2LogicPageGateId,proto3" json:"from_2_logic_page_gate_id,omitempty"`
}

func (x *LogicPageGateCreateRequest) Reset() {
	*x = LogicPageGateCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageGateCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageGateCreateRequest) ProtoMessage() {}

func (x *LogicPageGateCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageGateCreateRequest.ProtoReflect.Descriptor instead.
func (*LogicPageGateCreateRequest) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{10}
}

func (x *LogicPageGateCreateRequest) GetPageId() int32 {
	if x != nil {
		return x.PageId
	}
	return 0
}

func (x *LogicPageGateCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogicPageGateCreateRequest) GetComparison() SurveyLogicPageGateComparisonType {
	if x != nil {
		return x.Comparison
	}
	return SurveyLogicPageGateComparisonType_LOGIC_PAGE_GATE_COMPARISON_ALL_UNSPECIFIED
}

func (x *LogicPageGateCreateRequest) GetFrom_1Selector() SurveyLogicPageGateFromType {
	if x != nil {
		return x.From_1Selector
	}
	return SurveyLogicPageGateFromType_LOGIC_PAGE_GATE_FROM_ALL_UNSPECIFIED
}

func (x *LogicPageGateCreateRequest) GetFrom_1LogicPageSourceId() int32 {
	if x != nil {
		return x.From_1LogicPageSourceId
	}
	return 0
}

func (x *LogicPageGateCreateRequest) GetFrom_1LogicPageGateId() int32 {
	if x != nil {
		return x.From_1LogicPageGateId
	}
	return 0
}

func (x *LogicPageGateCreateRequest) GetFrom_2Selector() SurveyLogicPageGateFromType {
	if x != nil {
		return x.From_2Selector
	}
	return SurveyLogicPageGateFromType_LOGIC_PAGE_GATE_FROM_ALL_UNSPECIFIED
}

func (x *LogicPageGateCreateRequest) GetFrom_2LogicPageSourceId() int32 {
	if x != nil {
		return x.From_2LogicPageSourceId
	}
	return 0
}

func (x *LogicPageGateCreateRequest) GetFrom_2LogicPageGateId() int32 {
	if x != nil {
		return x.From_2LogicPageGateId
	}
	return 0
}

type LogicPageGateCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageGate *SurveyLogicPageGate `protobuf:"bytes,1,opt,name=logic_page_gate,json=logicPageGate,proto3" json:"logic_page_gate,omitempty"`
}

func (x *LogicPageGateCreateResponse) Reset() {
	*x = LogicPageGateCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageGateCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageGateCreateResponse) ProtoMessage() {}

func (x *LogicPageGateCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageGateCreateResponse.ProtoReflect.Descriptor instead.
func (*LogicPageGateCreateResponse) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{11}
}

func (x *LogicPageGateCreateResponse) GetLogicPageGate() *SurveyLogicPageGate {
	if x != nil {
		return x.LogicPageGate
	}
	return nil
}

type LogicPageGateUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageGateId int32  `protobuf:"varint,1,opt,name=logic_page_gate_id,json=logicPageGateId,proto3" json:"logic_page_gate_id,omitempty"`
	Name            string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// Payload
	Comparison              SurveyLogicPageGateComparisonType `protobuf:"varint,2,opt,name=comparison,proto3,enum=web.survey.v1.SurveyLogicPageGateComparisonType" json:"comparison,omitempty"`
	From_1Selector          SurveyLogicPageGateFromType       `protobuf:"varint,3,opt,name=from_1_selector,json=from1Selector,proto3,enum=web.survey.v1.SurveyLogicPageGateFromType" json:"from_1_selector,omitempty"`
	From_1LogicPageSourceId int32                             `protobuf:"varint,4,opt,name=from_1_logic_page_source_id,json=from1LogicPageSourceId,proto3" json:"from_1_logic_page_source_id,omitempty"`
	From_1LogicPageGateId   int32                             `protobuf:"varint,5,opt,name=from_1_logic_page_gate_id,json=from1LogicPageGateId,proto3" json:"from_1_logic_page_gate_id,omitempty"`
	From_2Selector          SurveyLogicPageGateFromType       `protobuf:"varint,6,opt,name=from_2_selector,json=from2Selector,proto3,enum=web.survey.v1.SurveyLogicPageGateFromType" json:"from_2_selector,omitempty"`
	From_2LogicPageSourceId int32                             `protobuf:"varint,7,opt,name=from_2_logic_page_source_id,json=from2LogicPageSourceId,proto3" json:"from_2_logic_page_source_id,omitempty"`
	From_2LogicPageGateId   int32                             `protobuf:"varint,8,opt,name=from_2_logic_page_gate_id,json=from2LogicPageGateId,proto3" json:"from_2_logic_page_gate_id,omitempty"`
}

func (x *LogicPageGateUpdateRequest) Reset() {
	*x = LogicPageGateUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageGateUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageGateUpdateRequest) ProtoMessage() {}

func (x *LogicPageGateUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageGateUpdateRequest.ProtoReflect.Descriptor instead.
func (*LogicPageGateUpdateRequest) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{12}
}

func (x *LogicPageGateUpdateRequest) GetLogicPageGateId() int32 {
	if x != nil {
		return x.LogicPageGateId
	}
	return 0
}

func (x *LogicPageGateUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogicPageGateUpdateRequest) GetComparison() SurveyLogicPageGateComparisonType {
	if x != nil {
		return x.Comparison
	}
	return SurveyLogicPageGateComparisonType_LOGIC_PAGE_GATE_COMPARISON_ALL_UNSPECIFIED
}

func (x *LogicPageGateUpdateRequest) GetFrom_1Selector() SurveyLogicPageGateFromType {
	if x != nil {
		return x.From_1Selector
	}
	return SurveyLogicPageGateFromType_LOGIC_PAGE_GATE_FROM_ALL_UNSPECIFIED
}

func (x *LogicPageGateUpdateRequest) GetFrom_1LogicPageSourceId() int32 {
	if x != nil {
		return x.From_1LogicPageSourceId
	}
	return 0
}

func (x *LogicPageGateUpdateRequest) GetFrom_1LogicPageGateId() int32 {
	if x != nil {
		return x.From_1LogicPageGateId
	}
	return 0
}

func (x *LogicPageGateUpdateRequest) GetFrom_2Selector() SurveyLogicPageGateFromType {
	if x != nil {
		return x.From_2Selector
	}
	return SurveyLogicPageGateFromType_LOGIC_PAGE_GATE_FROM_ALL_UNSPECIFIED
}

func (x *LogicPageGateUpdateRequest) GetFrom_2LogicPageSourceId() int32 {
	if x != nil {
		return x.From_2LogicPageSourceId
	}
	return 0
}

func (x *LogicPageGateUpdateRequest) GetFrom_2LogicPageGateId() int32 {
	if x != nil {
		return x.From_2LogicPageGateId
	}
	return 0
}

type LogicPageGateUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageGate *SurveyLogicPageGate `protobuf:"bytes,1,opt,name=logic_page_gate,json=logicPageGate,proto3" json:"logic_page_gate,omitempty"`
}

func (x *LogicPageGateUpdateResponse) Reset() {
	*x = LogicPageGateUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageGateUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageGateUpdateResponse) ProtoMessage() {}

func (x *LogicPageGateUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageGateUpdateResponse.ProtoReflect.Descriptor instead.
func (*LogicPageGateUpdateResponse) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{13}
}

func (x *LogicPageGateUpdateResponse) GetLogicPageGate() *SurveyLogicPageGate {
	if x != nil {
		return x.LogicPageGate
	}
	return nil
}

type LogicPageGateDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageGateId int32 `protobuf:"varint,1,opt,name=logic_page_gate_id,json=logicPageGateId,proto3" json:"logic_page_gate_id,omitempty"`
}

func (x *LogicPageGateDeleteRequest) Reset() {
	*x = LogicPageGateDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageGateDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageGateDeleteRequest) ProtoMessage() {}

func (x *LogicPageGateDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageGateDeleteRequest.ProtoReflect.Descriptor instead.
func (*LogicPageGateDeleteRequest) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{14}
}

func (x *LogicPageGateDeleteRequest) GetLogicPageGateId() int32 {
	if x != nil {
		return x.LogicPageGateId
	}
	return 0
}

type LogicPageGateDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogicPageGateDeleteResponse) Reset() {
	*x = LogicPageGateDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageGateDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageGateDeleteResponse) ProtoMessage() {}

func (x *LogicPageGateDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageGateDeleteResponse.ProtoReflect.Descriptor instead.
func (*LogicPageGateDeleteResponse) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{15}
}

type LogicPageActionGetListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId int32 `protobuf:"varint,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
}

func (x *LogicPageActionGetListRequest) Reset() {
	*x = LogicPageActionGetListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageActionGetListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageActionGetListRequest) ProtoMessage() {}

func (x *LogicPageActionGetListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageActionGetListRequest.ProtoReflect.Descriptor instead.
func (*LogicPageActionGetListRequest) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{16}
}

func (x *LogicPageActionGetListRequest) GetPageId() int32 {
	if x != nil {
		return x.PageId
	}
	return 0
}

type LogicPageActionGetListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageActions []*SurveyLogicPageAction `protobuf:"bytes,1,rep,name=logic_page_actions,json=logicPageActions,proto3" json:"logic_page_actions,omitempty"`
}

func (x *LogicPageActionGetListResponse) Reset() {
	*x = LogicPageActionGetListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageActionGetListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageActionGetListResponse) ProtoMessage() {}

func (x *LogicPageActionGetListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageActionGetListResponse.ProtoReflect.Descriptor instead.
func (*LogicPageActionGetListResponse) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{17}
}

func (x *LogicPageActionGetListResponse) GetLogicPageActions() []*SurveyLogicPageAction {
	if x != nil {
		return x.LogicPageActions
	}
	return nil
}

type LogicPageActionCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId int32  `protobuf:"varint,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Name   string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// Payload
	Priority              int32                         `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	FromSelector          SurveyLogicPageActionFromType `protobuf:"varint,3,opt,name=from_selector,json=fromSelector,proto3,enum=web.survey.v1.SurveyLogicPageActionFromType" json:"from_selector,omitempty"`
	FromLogicPageSourceId int32                         `protobuf:"varint,4,opt,name=from_logic_page_source_id,json=fromLogicPageSourceId,proto3" json:"from_logic_page_source_id,omitempty"`
	FromLogicPageGateId   int32                         `protobuf:"varint,5,opt,name=from_logic_page_gate_id,json=fromLogicPageGateId,proto3" json:"from_logic_page_gate_id,omitempty"`
	ToSelector            SurveyLogicPageActionToType   `protobuf:"varint,6,opt,name=to_selector,json=toSelector,proto3,enum=web.survey.v1.SurveyLogicPageActionToType" json:"to_selector,omitempty"`
	ToDisqualified        bool                          `protobuf:"varint,7,opt,name=to_disqualified,json=toDisqualified,proto3" json:"to_disqualified,omitempty"`
	ToSurveyPageId        int32                         `protobuf:"varint,8,opt,name=to_survey_page_id,json=toSurveyPageId,proto3" json:"to_survey_page_id,omitempty"`
}

func (x *LogicPageActionCreateRequest) Reset() {
	*x = LogicPageActionCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageActionCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageActionCreateRequest) ProtoMessage() {}

func (x *LogicPageActionCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageActionCreateRequest.ProtoReflect.Descriptor instead.
func (*LogicPageActionCreateRequest) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{18}
}

func (x *LogicPageActionCreateRequest) GetPageId() int32 {
	if x != nil {
		return x.PageId
	}
	return 0
}

func (x *LogicPageActionCreateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogicPageActionCreateRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *LogicPageActionCreateRequest) GetFromSelector() SurveyLogicPageActionFromType {
	if x != nil {
		return x.FromSelector
	}
	return SurveyLogicPageActionFromType_LOGIC_PAGE_ACTION_FROM_ALL_UNSPECIFIED
}

func (x *LogicPageActionCreateRequest) GetFromLogicPageSourceId() int32 {
	if x != nil {
		return x.FromLogicPageSourceId
	}
	return 0
}

func (x *LogicPageActionCreateRequest) GetFromLogicPageGateId() int32 {
	if x != nil {
		return x.FromLogicPageGateId
	}
	return 0
}

func (x *LogicPageActionCreateRequest) GetToSelector() SurveyLogicPageActionToType {
	if x != nil {
		return x.ToSelector
	}
	return SurveyLogicPageActionToType_LOGIC_PAGE_ACTION_TO_ALL_UNSPECIFIED
}

func (x *LogicPageActionCreateRequest) GetToDisqualified() bool {
	if x != nil {
		return x.ToDisqualified
	}
	return false
}

func (x *LogicPageActionCreateRequest) GetToSurveyPageId() int32 {
	if x != nil {
		return x.ToSurveyPageId
	}
	return 0
}

type LogicPageActionCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageAction *SurveyLogicPageAction `protobuf:"bytes,1,opt,name=logic_page_action,json=logicPageAction,proto3" json:"logic_page_action,omitempty"`
}

func (x *LogicPageActionCreateResponse) Reset() {
	*x = LogicPageActionCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageActionCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageActionCreateResponse) ProtoMessage() {}

func (x *LogicPageActionCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageActionCreateResponse.ProtoReflect.Descriptor instead.
func (*LogicPageActionCreateResponse) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{19}
}

func (x *LogicPageActionCreateResponse) GetLogicPageAction() *SurveyLogicPageAction {
	if x != nil {
		return x.LogicPageAction
	}
	return nil
}

type LogicPageActionUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageActionId int32  `protobuf:"varint,1,opt,name=logic_page_action_id,json=logicPageActionId,proto3" json:"logic_page_action_id,omitempty"`
	Name              string `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	// Payload
	Priority              int32                         `protobuf:"varint,2,opt,name=priority,proto3" json:"priority,omitempty"`
	FromSelector          SurveyLogicPageActionFromType `protobuf:"varint,3,opt,name=from_selector,json=fromSelector,proto3,enum=web.survey.v1.SurveyLogicPageActionFromType" json:"from_selector,omitempty"`
	FromLogicPageSourceId int32                         `protobuf:"varint,4,opt,name=from_logic_page_source_id,json=fromLogicPageSourceId,proto3" json:"from_logic_page_source_id,omitempty"`
	FromLogicPageGateId   int32                         `protobuf:"varint,5,opt,name=from_logic_page_gate_id,json=fromLogicPageGateId,proto3" json:"from_logic_page_gate_id,omitempty"`
	ToSelector            SurveyLogicPageActionToType   `protobuf:"varint,6,opt,name=to_selector,json=toSelector,proto3,enum=web.survey.v1.SurveyLogicPageActionToType" json:"to_selector,omitempty"`
	ToDisqualified        bool                          `protobuf:"varint,7,opt,name=to_disqualified,json=toDisqualified,proto3" json:"to_disqualified,omitempty"`
	ToSurveyPageId        int32                         `protobuf:"varint,8,opt,name=to_survey_page_id,json=toSurveyPageId,proto3" json:"to_survey_page_id,omitempty"`
}

func (x *LogicPageActionUpdateRequest) Reset() {
	*x = LogicPageActionUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageActionUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageActionUpdateRequest) ProtoMessage() {}

func (x *LogicPageActionUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageActionUpdateRequest.ProtoReflect.Descriptor instead.
func (*LogicPageActionUpdateRequest) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{20}
}

func (x *LogicPageActionUpdateRequest) GetLogicPageActionId() int32 {
	if x != nil {
		return x.LogicPageActionId
	}
	return 0
}

func (x *LogicPageActionUpdateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogicPageActionUpdateRequest) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *LogicPageActionUpdateRequest) GetFromSelector() SurveyLogicPageActionFromType {
	if x != nil {
		return x.FromSelector
	}
	return SurveyLogicPageActionFromType_LOGIC_PAGE_ACTION_FROM_ALL_UNSPECIFIED
}

func (x *LogicPageActionUpdateRequest) GetFromLogicPageSourceId() int32 {
	if x != nil {
		return x.FromLogicPageSourceId
	}
	return 0
}

func (x *LogicPageActionUpdateRequest) GetFromLogicPageGateId() int32 {
	if x != nil {
		return x.FromLogicPageGateId
	}
	return 0
}

func (x *LogicPageActionUpdateRequest) GetToSelector() SurveyLogicPageActionToType {
	if x != nil {
		return x.ToSelector
	}
	return SurveyLogicPageActionToType_LOGIC_PAGE_ACTION_TO_ALL_UNSPECIFIED
}

func (x *LogicPageActionUpdateRequest) GetToDisqualified() bool {
	if x != nil {
		return x.ToDisqualified
	}
	return false
}

func (x *LogicPageActionUpdateRequest) GetToSurveyPageId() int32 {
	if x != nil {
		return x.ToSurveyPageId
	}
	return 0
}

type LogicPageActionUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageAction *SurveyLogicPageAction `protobuf:"bytes,1,opt,name=logic_page_action,json=logicPageAction,proto3" json:"logic_page_action,omitempty"`
}

func (x *LogicPageActionUpdateResponse) Reset() {
	*x = LogicPageActionUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageActionUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageActionUpdateResponse) ProtoMessage() {}

func (x *LogicPageActionUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageActionUpdateResponse.ProtoReflect.Descriptor instead.
func (*LogicPageActionUpdateResponse) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{21}
}

func (x *LogicPageActionUpdateResponse) GetLogicPageAction() *SurveyLogicPageAction {
	if x != nil {
		return x.LogicPageAction
	}
	return nil
}

type LogicPageActionDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogicPageActionId int32 `protobuf:"varint,1,opt,name=logic_page_action_id,json=logicPageActionId,proto3" json:"logic_page_action_id,omitempty"`
}

func (x *LogicPageActionDeleteRequest) Reset() {
	*x = LogicPageActionDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageActionDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageActionDeleteRequest) ProtoMessage() {}

func (x *LogicPageActionDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageActionDeleteRequest.ProtoReflect.Descriptor instead.
func (*LogicPageActionDeleteRequest) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{22}
}

func (x *LogicPageActionDeleteRequest) GetLogicPageActionId() int32 {
	if x != nil {
		return x.LogicPageActionId
	}
	return 0
}

type LogicPageActionDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogicPageActionDeleteResponse) Reset() {
	*x = LogicPageActionDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogicPageActionDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicPageActionDeleteResponse) ProtoMessage() {}

func (x *LogicPageActionDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_survey_logic_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicPageActionDeleteResponse.ProtoReflect.Descriptor instead.
func (*LogicPageActionDeleteResponse) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_survey_logic_service_proto_rawDescGZIP(), []int{23}
}

var File_web_survey_v1_survey_logic_service_proto protoreflect.FileDescriptor

var file_web_survey_v1_survey_logic_service_proto_rawDesc = []byte{
	0x0a, 0x28, 0x77, 0x65, 0x62, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x77, 0x65, 0x62, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x19, 0x77, 0x65, 0x62, 0x2f, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a, 0x1d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x74,
	0x0a, 0x1e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77,
	0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x1c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x1d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x1c, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x52, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69,
	0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x1d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x4f, 0x0a, 0x1c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x1b, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x22, 0x6c, 0x0a, 0x1c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x65, 0x62,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x52, 0x0e,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x73, 0x22, 0xaf,
	0x04, 0x0a, 0x1a, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x31, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x31, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x3b, 0x0a, 0x1b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x31, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x66, 0x72, 0x6f, 0x6d, 0x31, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x19, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x31, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x31, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65,
	0x47, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x32,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x66, 0x72, 0x6f,
	0x6d, 0x32, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x1b, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x32, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x66, 0x72, 0x6f, 0x6d, 0x32, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x19, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x32, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d,
	0x32, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x22, 0x69, 0x0a, 0x1b, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x22, 0xc3, 0x04, 0x0a, 0x1a,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x52, 0x0a,
	0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x31, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x31, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x3b, 0x0a, 0x1b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x31, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x66, 0x72, 0x6f, 0x6d, 0x31, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x19, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x31, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x31, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x32, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65,
	0x47, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x66, 0x72,
	0x6f, 0x6d, 0x32, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x1b, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x32, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x66, 0x72, 0x6f, 0x6d, 0x32, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x19, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x32, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x66, 0x72, 0x6f,
	0x6d, 0x32, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x49,
	0x64, 0x22, 0x69, 0x0a, 0x1b, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4a, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x67,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x65, 0x62, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x1a,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x1d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50,
	0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x22, 0x74, 0x0a, 0x1e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcb, 0x03, 0x0a, 0x1c, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x51, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x19, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x17, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x6f, 0x44, 0x69, 0x73,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x6f, 0x5f,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x1d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe3, 0x03, 0x0a, 0x1c, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0d, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x19,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x17, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0b,
	0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74,
	0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x5f,
	0x64, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x6f, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74,
	0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x71, 0x0a,
	0x1d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50,
	0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x77, 0x65, 0x62, 0x2e,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x4f, 0x0a, 0x1c, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x1f, 0x0a, 0x1d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xf9, 0x0a, 0x0a, 0x16, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x75, 0x0a,
	0x16, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e,
	0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x77, 0x65, 0x62,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x2b, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c,
	0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x15,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6f, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61,
	0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x6c, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61,
	0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6c, 0x0a, 0x13, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65,
	0x47, 0x61, 0x74, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a,
	0x13, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x16, 0x4c,
	0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x72, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x77, 0x65,
	0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61,
	0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50,
	0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x2b, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x77,
	0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x15, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x54,
	0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x64, 0x65,
	0x61, 0x74, 0x65, 0x63, 0x68, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x69, 0x64, 0x65, 0x61, 0x74, 0x65,
	0x63, 0x68, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x2d, 0x67, 0x6f, 0x2f, 0x77, 0x65, 0x62, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2f,
	0x76, 0x31, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_web_survey_v1_survey_logic_service_proto_rawDescOnce sync.Once
	file_web_survey_v1_survey_logic_service_proto_rawDescData = file_web_survey_v1_survey_logic_service_proto_rawDesc
)

func file_web_survey_v1_survey_logic_service_proto_rawDescGZIP() []byte {
	file_web_survey_v1_survey_logic_service_proto_rawDescOnce.Do(func() {
		file_web_survey_v1_survey_logic_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_web_survey_v1_survey_logic_service_proto_rawDescData)
	})
	return file_web_survey_v1_survey_logic_service_proto_rawDescData
}

var file_web_survey_v1_survey_logic_service_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_web_survey_v1_survey_logic_service_proto_goTypes = []interface{}{
	(*LogicPageSourceGetListRequest)(nil),    // 0: web.survey.v1.LogicPageSourceGetListRequest
	(*LogicPageSourceGetListResponse)(nil),   // 1: web.survey.v1.LogicPageSourceGetListResponse
	(*LogicPageSourceCreateRequest)(nil),     // 2: web.survey.v1.LogicPageSourceCreateRequest
	(*LogicPageSourceCreateResponse)(nil),    // 3: web.survey.v1.LogicPageSourceCreateResponse
	(*LogicPageSourceUpdateRequest)(nil),     // 4: web.survey.v1.LogicPageSourceUpdateRequest
	(*LogicPageSourceUpdateResponse)(nil),    // 5: web.survey.v1.LogicPageSourceUpdateResponse
	(*LogicPageSourceDeleteRequest)(nil),     // 6: web.survey.v1.LogicPageSourceDeleteRequest
	(*LogicPageSourceDeleteResponse)(nil),    // 7: web.survey.v1.LogicPageSourceDeleteResponse
	(*LogicPageGateGetListRequest)(nil),      // 8: web.survey.v1.LogicPageGateGetListRequest
	(*LogicPageGateGetListResponse)(nil),     // 9: web.survey.v1.LogicPageGateGetListResponse
	(*LogicPageGateCreateRequest)(nil),       // 10: web.survey.v1.LogicPageGateCreateRequest
	(*LogicPageGateCreateResponse)(nil),      // 11: web.survey.v1.LogicPageGateCreateResponse
	(*LogicPageGateUpdateRequest)(nil),       // 12: web.survey.v1.LogicPageGateUpdateRequest
	(*LogicPageGateUpdateResponse)(nil),      // 13: web.survey.v1.LogicPageGateUpdateResponse
	(*LogicPageGateDeleteRequest)(nil),       // 14: web.survey.v1.LogicPageGateDeleteRequest
	(*LogicPageGateDeleteResponse)(nil),      // 15: web.survey.v1.LogicPageGateDeleteResponse
	(*LogicPageActionGetListRequest)(nil),    // 16: web.survey.v1.LogicPageActionGetListRequest
	(*LogicPageActionGetListResponse)(nil),   // 17: web.survey.v1.LogicPageActionGetListResponse
	(*LogicPageActionCreateRequest)(nil),     // 18: web.survey.v1.LogicPageActionCreateRequest
	(*LogicPageActionCreateResponse)(nil),    // 19: web.survey.v1.LogicPageActionCreateResponse
	(*LogicPageActionUpdateRequest)(nil),     // 20: web.survey.v1.LogicPageActionUpdateRequest
	(*LogicPageActionUpdateResponse)(nil),    // 21: web.survey.v1.LogicPageActionUpdateResponse
	(*LogicPageActionDeleteRequest)(nil),     // 22: web.survey.v1.LogicPageActionDeleteRequest
	(*LogicPageActionDeleteResponse)(nil),    // 23: web.survey.v1.LogicPageActionDeleteResponse
	(*SurveyLogicPageSource)(nil),            // 24: web.survey.v1.SurveyLogicPageSource
	(SurveyLogicPageSourceComparisonType)(0), // 25: web.survey.v1.SurveyLogicPageSourceComparisonType
	(*SurveyLogicPageGate)(nil),              // 26: web.survey.v1.SurveyLogicPageGate
	(SurveyLogicPageGateComparisonType)(0),   // 27: web.survey.v1.SurveyLogicPageGateComparisonType
	(SurveyLogicPageGateFromType)(0),         // 28: web.survey.v1.SurveyLogicPageGateFromType
	(*SurveyLogicPageAction)(nil),            // 29: web.survey.v1.SurveyLogicPageAction
	(SurveyLogicPageActionFromType)(0),       // 30: web.survey.v1.SurveyLogicPageActionFromType
	(SurveyLogicPageActionToType)(0),         // 31: web.survey.v1.SurveyLogicPageActionToType
}
var file_web_survey_v1_survey_logic_service_proto_depIdxs = []int32{
	24, // 0: web.survey.v1.LogicPageSourceGetListResponse.logic_page_sources:type_name -> web.survey.v1.SurveyLogicPageSource
	25, // 1: web.survey.v1.LogicPageSourceCreateRequest.comparison:type_name -> web.survey.v1.SurveyLogicPageSourceComparisonType
	24, // 2: web.survey.v1.LogicPageSourceCreateResponse.logic_page_source:type_name -> web.survey.v1.SurveyLogicPageSource
	25, // 3: web.survey.v1.LogicPageSourceUpdateRequest.comparison:type_name -> web.survey.v1.SurveyLogicPageSourceComparisonType
	24, // 4: web.survey.v1.LogicPageSourceUpdateResponse.logic_page_source:type_name -> web.survey.v1.SurveyLogicPageSource
	26, // 5: web.survey.v1.LogicPageGateGetListResponse.logic_page_gates:type_name -> web.survey.v1.SurveyLogicPageGate
	27, // 6: web.survey.v1.LogicPageGateCreateRequest.comparison:type_name -> web.survey.v1.SurveyLogicPageGateComparisonType
	28, // 7: web.survey.v1.LogicPageGateCreateRequest.from_1_selector:type_name -> web.survey.v1.SurveyLogicPageGateFromType
	28, // 8: web.survey.v1.LogicPageGateCreateRequest.from_2_selector:type_name -> web.survey.v1.SurveyLogicPageGateFromType
	26, // 9: web.survey.v1.LogicPageGateCreateResponse.logic_page_gate:type_name -> web.survey.v1.SurveyLogicPageGate
	27, // 10: web.survey.v1.LogicPageGateUpdateRequest.comparison:type_name -> web.survey.v1.SurveyLogicPageGateComparisonType
	28, // 11: web.survey.v1.LogicPageGateUpdateRequest.from_1_selector:type_name -> web.survey.v1.SurveyLogicPageGateFromType
	28, // 12: web.survey.v1.LogicPageGateUpdateRequest.from_2_selector:type_name -> web.survey.v1.SurveyLogicPageGateFromType
	26, // 13: web.survey.v1.LogicPageGateUpdateResponse.logic_page_gate:type_name -> web.survey.v1.SurveyLogicPageGate
	29, // 14: web.survey.v1.LogicPageActionGetListResponse.logic_page_actions:type_name -> web.survey.v1.SurveyLogicPageAction
	30, // 15: web.survey.v1.LogicPageActionCreateRequest.from_selector:type_name -> web.survey.v1.SurveyLogicPageActionFromType
	31, // 16: web.survey.v1.LogicPageActionCreateRequest.to_selector:type_name -> web.survey.v1.SurveyLogicPageActionToType
	29, // 17: web.survey.v1.LogicPageActionCreateResponse.logic_page_action:type_name -> web.survey.v1.SurveyLogicPageAction
	30, // 18: web.survey.v1.LogicPageActionUpdateRequest.from_selector:type_name -> web.survey.v1.SurveyLogicPageActionFromType
	31, // 19: web.survey.v1.LogicPageActionUpdateRequest.to_selector:type_name -> web.survey.v1.SurveyLogicPageActionToType
	29, // 20: web.survey.v1.LogicPageActionUpdateResponse.logic_page_action:type_name -> web.survey.v1.SurveyLogicPageAction
	0,  // 21: web.survey.v1.SurveyLogicPageService.LogicPageSourceGetList:input_type -> web.survey.v1.LogicPageSourceGetListRequest
	2,  // 22: web.survey.v1.SurveyLogicPageService.LogicPageSourceCreate:input_type -> web.survey.v1.LogicPageSourceCreateRequest
	4,  // 23: web.survey.v1.SurveyLogicPageService.LogicPageSourceUpdate:input_type -> web.survey.v1.LogicPageSourceUpdateRequest
	6,  // 24: web.survey.v1.SurveyLogicPageService.LogicPageSourceDelete:input_type -> web.survey.v1.LogicPageSourceDeleteRequest
	8,  // 25: web.survey.v1.SurveyLogicPageService.LogicPageGateGetList:input_type -> web.survey.v1.LogicPageGateGetListRequest
	10, // 26: web.survey.v1.SurveyLogicPageService.LogicPageGateCreate:input_type -> web.survey.v1.LogicPageGateCreateRequest
	12, // 27: web.survey.v1.SurveyLogicPageService.LogicPageGateUpdate:input_type -> web.survey.v1.LogicPageGateUpdateRequest
	14, // 28: web.survey.v1.SurveyLogicPageService.LogicPageGateDelete:input_type -> web.survey.v1.LogicPageGateDeleteRequest
	16, // 29: web.survey.v1.SurveyLogicPageService.LogicPageActionGetList:input_type -> web.survey.v1.LogicPageActionGetListRequest
	18, // 30: web.survey.v1.SurveyLogicPageService.LogicPageActionCreate:input_type -> web.survey.v1.LogicPageActionCreateRequest
	20, // 31: web.survey.v1.SurveyLogicPageService.LogicPageActionUpdate:input_type -> web.survey.v1.LogicPageActionUpdateRequest
	22, // 32: web.survey.v1.SurveyLogicPageService.LogicPageActionDelete:input_type -> web.survey.v1.LogicPageActionDeleteRequest
	1,  // 33: web.survey.v1.SurveyLogicPageService.LogicPageSourceGetList:output_type -> web.survey.v1.LogicPageSourceGetListResponse
	3,  // 34: web.survey.v1.SurveyLogicPageService.LogicPageSourceCreate:output_type -> web.survey.v1.LogicPageSourceCreateResponse
	5,  // 35: web.survey.v1.SurveyLogicPageService.LogicPageSourceUpdate:output_type -> web.survey.v1.LogicPageSourceUpdateResponse
	7,  // 36: web.survey.v1.SurveyLogicPageService.LogicPageSourceDelete:output_type -> web.survey.v1.LogicPageSourceDeleteResponse
	9,  // 37: web.survey.v1.SurveyLogicPageService.LogicPageGateGetList:output_type -> web.survey.v1.LogicPageGateGetListResponse
	11, // 38: web.survey.v1.SurveyLogicPageService.LogicPageGateCreate:output_type -> web.survey.v1.LogicPageGateCreateResponse
	13, // 39: web.survey.v1.SurveyLogicPageService.LogicPageGateUpdate:output_type -> web.survey.v1.LogicPageGateUpdateResponse
	15, // 40: web.survey.v1.SurveyLogicPageService.LogicPageGateDelete:output_type -> web.survey.v1.LogicPageGateDeleteResponse
	17, // 41: web.survey.v1.SurveyLogicPageService.LogicPageActionGetList:output_type -> web.survey.v1.LogicPageActionGetListResponse
	19, // 42: web.survey.v1.SurveyLogicPageService.LogicPageActionCreate:output_type -> web.survey.v1.LogicPageActionCreateResponse
	21, // 43: web.survey.v1.SurveyLogicPageService.LogicPageActionUpdate:output_type -> web.survey.v1.LogicPageActionUpdateResponse
	23, // 44: web.survey.v1.SurveyLogicPageService.LogicPageActionDelete:output_type -> web.survey.v1.LogicPageActionDeleteResponse
	33, // [33:45] is the sub-list for method output_type
	21, // [21:33] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_web_survey_v1_survey_logic_service_proto_init() }
func file_web_survey_v1_survey_logic_service_proto_init() {
	if File_web_survey_v1_survey_logic_service_proto != nil {
		return
	}
	file_web_survey_v1_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_web_survey_v1_survey_logic_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageSourceGetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageSourceGetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageSourceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageSourceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageSourceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageSourceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageSourceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageSourceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageGateGetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageGateGetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageGateCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageGateCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageGateUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageGateUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageGateDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageGateDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageActionGetListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageActionGetListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageActionCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageActionCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageActionUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageActionUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageActionDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_survey_logic_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogicPageActionDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_web_survey_v1_survey_logic_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_web_survey_v1_survey_logic_service_proto_goTypes,
		DependencyIndexes: file_web_survey_v1_survey_logic_service_proto_depIdxs,
		MessageInfos:      file_web_survey_v1_survey_logic_service_proto_msgTypes,
	}.Build()
	File_web_survey_v1_survey_logic_service_proto = out.File
	file_web_survey_v1_survey_logic_service_proto_rawDesc = nil
	file_web_survey_v1_survey_logic_service_proto_goTypes = nil
	file_web_survey_v1_survey_logic_service_proto_depIdxs = nil
}
