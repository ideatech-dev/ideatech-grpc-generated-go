// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.2
// source: web/survey/v1/types.proto

package grpcweb_survey_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SurveyType int32

const (
	SurveyType_SURVEY_TYPE_ALL_UNSPECIFIED SurveyType = 0
	SurveyType_SURVEY_TYPE_FORM            SurveyType = 1
	SurveyType_SURVEY_TYPE_QUIZ            SurveyType = 2
)

// Enum value maps for SurveyType.
var (
	SurveyType_name = map[int32]string{
		0: "SURVEY_TYPE_ALL_UNSPECIFIED",
		1: "SURVEY_TYPE_FORM",
		2: "SURVEY_TYPE_QUIZ",
	}
	SurveyType_value = map[string]int32{
		"SURVEY_TYPE_ALL_UNSPECIFIED": 0,
		"SURVEY_TYPE_FORM":            1,
		"SURVEY_TYPE_QUIZ":            2,
	}
)

func (x SurveyType) Enum() *SurveyType {
	p := new(SurveyType)
	*p = x
	return p
}

func (x SurveyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SurveyType) Descriptor() protoreflect.EnumDescriptor {
	return file_web_survey_v1_types_proto_enumTypes[0].Descriptor()
}

func (SurveyType) Type() protoreflect.EnumType {
	return &file_web_survey_v1_types_proto_enumTypes[0]
}

func (x SurveyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SurveyType.Descriptor instead.
func (SurveyType) EnumDescriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{0}
}

type SurveyQuestionType int32

const (
	SurveyQuestionType_QUESTION_MODE_TEXT_UNSPECIFIED SurveyQuestionType = 0
	SurveyQuestionType_QUESTION_MODE_TEXTFIELD        SurveyQuestionType = 1
	SurveyQuestionType_QUESTION_MODE_RADIO            SurveyQuestionType = 2
	SurveyQuestionType_QUESTION_MODE_CHECKBOX         SurveyQuestionType = 3
	SurveyQuestionType_QUESTION_MODE_DATE             SurveyQuestionType = 4
	SurveyQuestionType_QUESTION_MODE_WEBHOOK          SurveyQuestionType = 5
	SurveyQuestionType_QUESTION_MODE_RATING           SurveyQuestionType = 6
	SurveyQuestionType_QUESTION_MODE_TIME             SurveyQuestionType = 7
	SurveyQuestionType_QUESTION_MODE_DATETIME         SurveyQuestionType = 8
	SurveyQuestionType_QUESTION_MODE_UPLOAD           SurveyQuestionType = 9
	SurveyQuestionType_QUESTION_MODE_PARAGRAPH        SurveyQuestionType = 10
	SurveyQuestionType_QUESTION_MODE_REDIRECT         SurveyQuestionType = 11
)

// Enum value maps for SurveyQuestionType.
var (
	SurveyQuestionType_name = map[int32]string{
		0:  "QUESTION_MODE_TEXT_UNSPECIFIED",
		1:  "QUESTION_MODE_TEXTFIELD",
		2:  "QUESTION_MODE_RADIO",
		3:  "QUESTION_MODE_CHECKBOX",
		4:  "QUESTION_MODE_DATE",
		5:  "QUESTION_MODE_WEBHOOK",
		6:  "QUESTION_MODE_RATING",
		7:  "QUESTION_MODE_TIME",
		8:  "QUESTION_MODE_DATETIME",
		9:  "QUESTION_MODE_UPLOAD",
		10: "QUESTION_MODE_PARAGRAPH",
		11: "QUESTION_MODE_REDIRECT",
	}
	SurveyQuestionType_value = map[string]int32{
		"QUESTION_MODE_TEXT_UNSPECIFIED": 0,
		"QUESTION_MODE_TEXTFIELD":        1,
		"QUESTION_MODE_RADIO":            2,
		"QUESTION_MODE_CHECKBOX":         3,
		"QUESTION_MODE_DATE":             4,
		"QUESTION_MODE_WEBHOOK":          5,
		"QUESTION_MODE_RATING":           6,
		"QUESTION_MODE_TIME":             7,
		"QUESTION_MODE_DATETIME":         8,
		"QUESTION_MODE_UPLOAD":           9,
		"QUESTION_MODE_PARAGRAPH":        10,
		"QUESTION_MODE_REDIRECT":         11,
	}
)

func (x SurveyQuestionType) Enum() *SurveyQuestionType {
	p := new(SurveyQuestionType)
	*p = x
	return p
}

func (x SurveyQuestionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SurveyQuestionType) Descriptor() protoreflect.EnumDescriptor {
	return file_web_survey_v1_types_proto_enumTypes[1].Descriptor()
}

func (SurveyQuestionType) Type() protoreflect.EnumType {
	return &file_web_survey_v1_types_proto_enumTypes[1]
}

func (x SurveyQuestionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SurveyQuestionType.Descriptor instead.
func (SurveyQuestionType) EnumDescriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{1}
}

type SurveyLogicPageSourceComparisonType int32

const (
	SurveyLogicPageSourceComparisonType_LOGIC_PAGE_SOURCE_COMPARISON_ALL_UNSPECIFIED SurveyLogicPageSourceComparisonType = 0
	SurveyLogicPageSourceComparisonType_LOGIC_PAGE_SOURCE_COMPARISON_EQUAL           SurveyLogicPageSourceComparisonType = 1
	SurveyLogicPageSourceComparisonType_LOGIC_PAGE_SOURCE_COMPARISON_CONTAIN         SurveyLogicPageSourceComparisonType = 2
)

// Enum value maps for SurveyLogicPageSourceComparisonType.
var (
	SurveyLogicPageSourceComparisonType_name = map[int32]string{
		0: "LOGIC_PAGE_SOURCE_COMPARISON_ALL_UNSPECIFIED",
		1: "LOGIC_PAGE_SOURCE_COMPARISON_EQUAL",
		2: "LOGIC_PAGE_SOURCE_COMPARISON_CONTAIN",
	}
	SurveyLogicPageSourceComparisonType_value = map[string]int32{
		"LOGIC_PAGE_SOURCE_COMPARISON_ALL_UNSPECIFIED": 0,
		"LOGIC_PAGE_SOURCE_COMPARISON_EQUAL":           1,
		"LOGIC_PAGE_SOURCE_COMPARISON_CONTAIN":         2,
	}
)

func (x SurveyLogicPageSourceComparisonType) Enum() *SurveyLogicPageSourceComparisonType {
	p := new(SurveyLogicPageSourceComparisonType)
	*p = x
	return p
}

func (x SurveyLogicPageSourceComparisonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SurveyLogicPageSourceComparisonType) Descriptor() protoreflect.EnumDescriptor {
	return file_web_survey_v1_types_proto_enumTypes[2].Descriptor()
}

func (SurveyLogicPageSourceComparisonType) Type() protoreflect.EnumType {
	return &file_web_survey_v1_types_proto_enumTypes[2]
}

func (x SurveyLogicPageSourceComparisonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SurveyLogicPageSourceComparisonType.Descriptor instead.
func (SurveyLogicPageSourceComparisonType) EnumDescriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{2}
}

type SurveyLogicPageGateComparisonType int32

const (
	SurveyLogicPageGateComparisonType_LOGIC_PAGE_GATE_COMPARISON_ALL_UNSPECIFIED SurveyLogicPageGateComparisonType = 0
	SurveyLogicPageGateComparisonType_LOGIC_PAGE_GATE_COMPARISON_AND             SurveyLogicPageGateComparisonType = 1
	SurveyLogicPageGateComparisonType_LOGIC_PAGE_GATE_COMPARISON_OR              SurveyLogicPageGateComparisonType = 2
	SurveyLogicPageGateComparisonType_LOGIC_PAGE_GATE_COMPARISON_XOR             SurveyLogicPageGateComparisonType = 3
	SurveyLogicPageGateComparisonType_LOGIC_PAGE_GATE_COMPARISON_NAND            SurveyLogicPageGateComparisonType = 4
	SurveyLogicPageGateComparisonType_LOGIC_PAGE_GATE_COMPARISON_NOR             SurveyLogicPageGateComparisonType = 5
	SurveyLogicPageGateComparisonType_LOGIC_PAGE_GATE_COMPARISON_XNOR            SurveyLogicPageGateComparisonType = 6
)

// Enum value maps for SurveyLogicPageGateComparisonType.
var (
	SurveyLogicPageGateComparisonType_name = map[int32]string{
		0: "LOGIC_PAGE_GATE_COMPARISON_ALL_UNSPECIFIED",
		1: "LOGIC_PAGE_GATE_COMPARISON_AND",
		2: "LOGIC_PAGE_GATE_COMPARISON_OR",
		3: "LOGIC_PAGE_GATE_COMPARISON_XOR",
		4: "LOGIC_PAGE_GATE_COMPARISON_NAND",
		5: "LOGIC_PAGE_GATE_COMPARISON_NOR",
		6: "LOGIC_PAGE_GATE_COMPARISON_XNOR",
	}
	SurveyLogicPageGateComparisonType_value = map[string]int32{
		"LOGIC_PAGE_GATE_COMPARISON_ALL_UNSPECIFIED": 0,
		"LOGIC_PAGE_GATE_COMPARISON_AND":             1,
		"LOGIC_PAGE_GATE_COMPARISON_OR":              2,
		"LOGIC_PAGE_GATE_COMPARISON_XOR":             3,
		"LOGIC_PAGE_GATE_COMPARISON_NAND":            4,
		"LOGIC_PAGE_GATE_COMPARISON_NOR":             5,
		"LOGIC_PAGE_GATE_COMPARISON_XNOR":            6,
	}
)

func (x SurveyLogicPageGateComparisonType) Enum() *SurveyLogicPageGateComparisonType {
	p := new(SurveyLogicPageGateComparisonType)
	*p = x
	return p
}

func (x SurveyLogicPageGateComparisonType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SurveyLogicPageGateComparisonType) Descriptor() protoreflect.EnumDescriptor {
	return file_web_survey_v1_types_proto_enumTypes[3].Descriptor()
}

func (SurveyLogicPageGateComparisonType) Type() protoreflect.EnumType {
	return &file_web_survey_v1_types_proto_enumTypes[3]
}

func (x SurveyLogicPageGateComparisonType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SurveyLogicPageGateComparisonType.Descriptor instead.
func (SurveyLogicPageGateComparisonType) EnumDescriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{3}
}

type SurveyLogicPageGateFromType int32

const (
	SurveyLogicPageGateFromType_LOGIC_PAGE_GATE_FROM_ALL_UNSPECIFIED SurveyLogicPageGateFromType = 0
	SurveyLogicPageGateFromType_LOGIC_PAGE_GATE_FROM_SOURCE          SurveyLogicPageGateFromType = 1
	SurveyLogicPageGateFromType_LOGIC_PAGE_GATE_FROM_GATE            SurveyLogicPageGateFromType = 2
)

// Enum value maps for SurveyLogicPageGateFromType.
var (
	SurveyLogicPageGateFromType_name = map[int32]string{
		0: "LOGIC_PAGE_GATE_FROM_ALL_UNSPECIFIED",
		1: "LOGIC_PAGE_GATE_FROM_SOURCE",
		2: "LOGIC_PAGE_GATE_FROM_GATE",
	}
	SurveyLogicPageGateFromType_value = map[string]int32{
		"LOGIC_PAGE_GATE_FROM_ALL_UNSPECIFIED": 0,
		"LOGIC_PAGE_GATE_FROM_SOURCE":          1,
		"LOGIC_PAGE_GATE_FROM_GATE":            2,
	}
)

func (x SurveyLogicPageGateFromType) Enum() *SurveyLogicPageGateFromType {
	p := new(SurveyLogicPageGateFromType)
	*p = x
	return p
}

func (x SurveyLogicPageGateFromType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SurveyLogicPageGateFromType) Descriptor() protoreflect.EnumDescriptor {
	return file_web_survey_v1_types_proto_enumTypes[4].Descriptor()
}

func (SurveyLogicPageGateFromType) Type() protoreflect.EnumType {
	return &file_web_survey_v1_types_proto_enumTypes[4]
}

func (x SurveyLogicPageGateFromType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SurveyLogicPageGateFromType.Descriptor instead.
func (SurveyLogicPageGateFromType) EnumDescriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{4}
}

type SurveyLogicPageActionFromType int32

const (
	SurveyLogicPageActionFromType_LOGIC_PAGE_ACTION_FROM_ALL_UNSPECIFIED SurveyLogicPageActionFromType = 0
	SurveyLogicPageActionFromType_LOGIC_PAGE_ACTION_FROM_SOURCE          SurveyLogicPageActionFromType = 1
	SurveyLogicPageActionFromType_LOGIC_PAGE_ACTION_FROM_GATE            SurveyLogicPageActionFromType = 2
)

// Enum value maps for SurveyLogicPageActionFromType.
var (
	SurveyLogicPageActionFromType_name = map[int32]string{
		0: "LOGIC_PAGE_ACTION_FROM_ALL_UNSPECIFIED",
		1: "LOGIC_PAGE_ACTION_FROM_SOURCE",
		2: "LOGIC_PAGE_ACTION_FROM_GATE",
	}
	SurveyLogicPageActionFromType_value = map[string]int32{
		"LOGIC_PAGE_ACTION_FROM_ALL_UNSPECIFIED": 0,
		"LOGIC_PAGE_ACTION_FROM_SOURCE":          1,
		"LOGIC_PAGE_ACTION_FROM_GATE":            2,
	}
)

func (x SurveyLogicPageActionFromType) Enum() *SurveyLogicPageActionFromType {
	p := new(SurveyLogicPageActionFromType)
	*p = x
	return p
}

func (x SurveyLogicPageActionFromType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SurveyLogicPageActionFromType) Descriptor() protoreflect.EnumDescriptor {
	return file_web_survey_v1_types_proto_enumTypes[5].Descriptor()
}

func (SurveyLogicPageActionFromType) Type() protoreflect.EnumType {
	return &file_web_survey_v1_types_proto_enumTypes[5]
}

func (x SurveyLogicPageActionFromType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SurveyLogicPageActionFromType.Descriptor instead.
func (SurveyLogicPageActionFromType) EnumDescriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{5}
}

type SurveyLogicPageActionToType int32

const (
	SurveyLogicPageActionToType_LOGIC_PAGE_ACTION_TO_ALL_UNSPECIFIED SurveyLogicPageActionToType = 0
	SurveyLogicPageActionToType_LOGIC_PAGE_ACTION_TO_DISQUALIFIED    SurveyLogicPageActionToType = 1
	SurveyLogicPageActionToType_LOGIC_PAGE_ACTION_TO_SURVEY_PAGE_ID  SurveyLogicPageActionToType = 2
)

// Enum value maps for SurveyLogicPageActionToType.
var (
	SurveyLogicPageActionToType_name = map[int32]string{
		0: "LOGIC_PAGE_ACTION_TO_ALL_UNSPECIFIED",
		1: "LOGIC_PAGE_ACTION_TO_DISQUALIFIED",
		2: "LOGIC_PAGE_ACTION_TO_SURVEY_PAGE_ID",
	}
	SurveyLogicPageActionToType_value = map[string]int32{
		"LOGIC_PAGE_ACTION_TO_ALL_UNSPECIFIED": 0,
		"LOGIC_PAGE_ACTION_TO_DISQUALIFIED":    1,
		"LOGIC_PAGE_ACTION_TO_SURVEY_PAGE_ID":  2,
	}
)

func (x SurveyLogicPageActionToType) Enum() *SurveyLogicPageActionToType {
	p := new(SurveyLogicPageActionToType)
	*p = x
	return p
}

func (x SurveyLogicPageActionToType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SurveyLogicPageActionToType) Descriptor() protoreflect.EnumDescriptor {
	return file_web_survey_v1_types_proto_enumTypes[6].Descriptor()
}

func (SurveyLogicPageActionToType) Type() protoreflect.EnumType {
	return &file_web_survey_v1_types_proto_enumTypes[6]
}

func (x SurveyLogicPageActionToType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SurveyLogicPageActionToType.Descriptor instead.
func (SurveyLogicPageActionToType) EnumDescriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{6}
}

type Survey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DatetimeCreated *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=datetime_created,json=datetimeCreated,proto3" json:"datetime_created,omitempty"`
	DatetimeUpdated *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=datetime_updated,json=datetimeUpdated,proto3" json:"datetime_updated,omitempty"`
	OrganizationId  int32                  `protobuf:"varint,4,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name            string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Type            SurveyType             `protobuf:"varint,6,opt,name=type,proto3,enum=web.survey.v1.SurveyType" json:"type,omitempty"`
}

func (x *Survey) Reset() {
	*x = Survey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Survey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Survey) ProtoMessage() {}

func (x *Survey) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Survey.ProtoReflect.Descriptor instead.
func (*Survey) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{0}
}

func (x *Survey) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Survey) GetDatetimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeCreated
	}
	return nil
}

func (x *Survey) GetDatetimeUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeUpdated
	}
	return nil
}

func (x *Survey) GetOrganizationId() int32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *Survey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Survey) GetType() SurveyType {
	if x != nil {
		return x.Type
	}
	return SurveyType_SURVEY_TYPE_ALL_UNSPECIFIED
}

type SurveyPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SurveyId  int32             `protobuf:"varint,2,opt,name=survey_id,json=surveyId,proto3" json:"survey_id,omitempty"`
	Orders    int32             `protobuf:"varint,3,opt,name=orders,proto3" json:"orders,omitempty"`
	Questions []*SurveyQuestion `protobuf:"bytes,4,rep,name=questions,proto3" json:"questions,omitempty"`
}

func (x *SurveyPage) Reset() {
	*x = SurveyPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyPage) ProtoMessage() {}

func (x *SurveyPage) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyPage.ProtoReflect.Descriptor instead.
func (*SurveyPage) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{1}
}

func (x *SurveyPage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SurveyPage) GetSurveyId() int32 {
	if x != nil {
		return x.SurveyId
	}
	return 0
}

func (x *SurveyPage) GetOrders() int32 {
	if x != nil {
		return x.Orders
	}
	return 0
}

func (x *SurveyPage) GetQuestions() []*SurveyQuestion {
	if x != nil {
		return x.Questions
	}
	return nil
}

type SurveyQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SurveyPageId int32                 `protobuf:"varint,2,opt,name=survey_page_id,json=surveyPageId,proto3" json:"survey_page_id,omitempty"`
	Question     string                `protobuf:"bytes,3,opt,name=question,proto3" json:"question,omitempty"`
	Orders       int32                 `protobuf:"varint,4,opt,name=orders,proto3" json:"orders,omitempty"`
	Type         SurveyQuestionType    `protobuf:"varint,5,opt,name=type,proto3,enum=web.survey.v1.SurveyQuestionType" json:"type,omitempty"`
	Option       *SurveyQuestionOption `protobuf:"bytes,6,opt,name=option,proto3" json:"option,omitempty"`
	Choices      []*SurveyChoice       `protobuf:"bytes,7,rep,name=choices,proto3" json:"choices,omitempty"`
}

func (x *SurveyQuestion) Reset() {
	*x = SurveyQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyQuestion) ProtoMessage() {}

func (x *SurveyQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyQuestion.ProtoReflect.Descriptor instead.
func (*SurveyQuestion) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{2}
}

func (x *SurveyQuestion) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SurveyQuestion) GetSurveyPageId() int32 {
	if x != nil {
		return x.SurveyPageId
	}
	return 0
}

func (x *SurveyQuestion) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *SurveyQuestion) GetOrders() int32 {
	if x != nil {
		return x.Orders
	}
	return 0
}

func (x *SurveyQuestion) GetType() SurveyQuestionType {
	if x != nil {
		return x.Type
	}
	return SurveyQuestionType_QUESTION_MODE_TEXT_UNSPECIFIED
}

func (x *SurveyQuestion) GetOption() *SurveyQuestionOption {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *SurveyQuestion) GetChoices() []*SurveyChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

type SurveyQuestionOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRequired            bool   `protobuf:"varint,1,opt,name=is_required,json=isRequired,proto3" json:"is_required,omitempty"`
	IsRandomChoice        bool   `protobuf:"varint,2,opt,name=is_random_choice,json=isRandomChoice,proto3" json:"is_random_choice,omitempty"`
	IsTextfieldOnlyNumber bool   `protobuf:"varint,3,opt,name=is_textfield_only_number,json=isTextfieldOnlyNumber,proto3" json:"is_textfield_only_number,omitempty"`
	IsTextfieldMultiline  bool   `protobuf:"varint,4,opt,name=is_textfield_multiline,json=isTextfieldMultiline,proto3" json:"is_textfield_multiline,omitempty"`
	RedirectUrl           string `protobuf:"bytes,5,opt,name=redirect_url,json=redirectUrl,proto3" json:"redirect_url,omitempty"`
	RedirectTimeOffset    int32  `protobuf:"varint,6,opt,name=redirect_time_offset,json=redirectTimeOffset,proto3" json:"redirect_time_offset,omitempty"`
	WebhookUrl            string `protobuf:"bytes,7,opt,name=webhook_url,json=webhookUrl,proto3" json:"webhook_url,omitempty"`
}

func (x *SurveyQuestionOption) Reset() {
	*x = SurveyQuestionOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyQuestionOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyQuestionOption) ProtoMessage() {}

func (x *SurveyQuestionOption) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyQuestionOption.ProtoReflect.Descriptor instead.
func (*SurveyQuestionOption) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{3}
}

func (x *SurveyQuestionOption) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *SurveyQuestionOption) GetIsRandomChoice() bool {
	if x != nil {
		return x.IsRandomChoice
	}
	return false
}

func (x *SurveyQuestionOption) GetIsTextfieldOnlyNumber() bool {
	if x != nil {
		return x.IsTextfieldOnlyNumber
	}
	return false
}

func (x *SurveyQuestionOption) GetIsTextfieldMultiline() bool {
	if x != nil {
		return x.IsTextfieldMultiline
	}
	return false
}

func (x *SurveyQuestionOption) GetRedirectUrl() string {
	if x != nil {
		return x.RedirectUrl
	}
	return ""
}

func (x *SurveyQuestionOption) GetRedirectTimeOffset() int32 {
	if x != nil {
		return x.RedirectTimeOffset
	}
	return 0
}

func (x *SurveyQuestionOption) GetWebhookUrl() string {
	if x != nil {
		return x.WebhookUrl
	}
	return ""
}

type SurveyChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SurveyQuestionId int32  `protobuf:"varint,2,opt,name=survey_question_id,json=surveyQuestionId,proto3" json:"survey_question_id,omitempty"`
	Choice           string `protobuf:"bytes,3,opt,name=choice,proto3" json:"choice,omitempty"`
	Orders           int32  `protobuf:"varint,4,opt,name=orders,proto3" json:"orders,omitempty"`
	Score            int32  `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *SurveyChoice) Reset() {
	*x = SurveyChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyChoice) ProtoMessage() {}

func (x *SurveyChoice) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyChoice.ProtoReflect.Descriptor instead.
func (*SurveyChoice) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{4}
}

func (x *SurveyChoice) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SurveyChoice) GetSurveyQuestionId() int32 {
	if x != nil {
		return x.SurveyQuestionId
	}
	return 0
}

func (x *SurveyChoice) GetChoice() string {
	if x != nil {
		return x.Choice
	}
	return ""
}

func (x *SurveyChoice) GetOrders() int32 {
	if x != nil {
		return x.Orders
	}
	return 0
}

func (x *SurveyChoice) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type SurveyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SurveyId         int32                  `protobuf:"varint,2,opt,name=survey_id,json=surveyId,proto3" json:"survey_id,omitempty"`
	LastSurveyPageId int32                  `protobuf:"varint,3,opt,name=last_survey_page_id,json=lastSurveyPageId,proto3" json:"last_survey_page_id,omitempty"`
	Session          string                 `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
	Url              string                 `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	UrlParam         string                 `protobuf:"bytes,6,opt,name=url_param,json=urlParam,proto3" json:"url_param,omitempty"`
	DatetimeStart    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=datetime_start,json=datetimeStart,proto3" json:"datetime_start,omitempty"`
	DatetimeEnd      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=datetime_end,json=datetimeEnd,proto3" json:"datetime_end,omitempty"`
}

func (x *SurveyResponse) Reset() {
	*x = SurveyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyResponse) ProtoMessage() {}

func (x *SurveyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyResponse.ProtoReflect.Descriptor instead.
func (*SurveyResponse) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{5}
}

func (x *SurveyResponse) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SurveyResponse) GetSurveyId() int32 {
	if x != nil {
		return x.SurveyId
	}
	return 0
}

func (x *SurveyResponse) GetLastSurveyPageId() int32 {
	if x != nil {
		return x.LastSurveyPageId
	}
	return 0
}

func (x *SurveyResponse) GetSession() string {
	if x != nil {
		return x.Session
	}
	return ""
}

func (x *SurveyResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SurveyResponse) GetUrlParam() string {
	if x != nil {
		return x.UrlParam
	}
	return ""
}

func (x *SurveyResponse) GetDatetimeStart() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeStart
	}
	return nil
}

func (x *SurveyResponse) GetDatetimeEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeEnd
	}
	return nil
}

type SurveyResponseAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ResponseId      int32                  `protobuf:"varint,2,opt,name=response_id,json=responseId,proto3" json:"response_id,omitempty"`
	QuestionId      int32                  `protobuf:"varint,3,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	Values          []string               `protobuf:"bytes,4,rep,name=values,proto3" json:"values,omitempty"`
	DatetimeCreated *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=datetime_created,json=datetimeCreated,proto3" json:"datetime_created,omitempty"`
}

func (x *SurveyResponseAnswer) Reset() {
	*x = SurveyResponseAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyResponseAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyResponseAnswer) ProtoMessage() {}

func (x *SurveyResponseAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyResponseAnswer.ProtoReflect.Descriptor instead.
func (*SurveyResponseAnswer) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{6}
}

func (x *SurveyResponseAnswer) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SurveyResponseAnswer) GetResponseId() int32 {
	if x != nil {
		return x.ResponseId
	}
	return 0
}

func (x *SurveyResponseAnswer) GetQuestionId() int32 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *SurveyResponseAnswer) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *SurveyResponseAnswer) GetDatetimeCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.DatetimeCreated
	}
	return nil
}

type SurveyLogicPageSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   int32                               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SurveyPageId         int32                               `protobuf:"varint,2,opt,name=survey_page_id,json=surveyPageId,proto3" json:"survey_page_id,omitempty"`
	Comparison           SurveyLogicPageSourceComparisonType `protobuf:"varint,3,opt,name=comparison,proto3,enum=web.survey.v1.SurveyLogicPageSourceComparisonType" json:"comparison,omitempty"`
	Value                string                              `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	FromSurveyQuestionId int32                               `protobuf:"varint,5,opt,name=from_survey_question_id,json=fromSurveyQuestionId,proto3" json:"from_survey_question_id,omitempty"`
}

func (x *SurveyLogicPageSource) Reset() {
	*x = SurveyLogicPageSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyLogicPageSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyLogicPageSource) ProtoMessage() {}

func (x *SurveyLogicPageSource) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyLogicPageSource.ProtoReflect.Descriptor instead.
func (*SurveyLogicPageSource) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{7}
}

func (x *SurveyLogicPageSource) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SurveyLogicPageSource) GetSurveyPageId() int32 {
	if x != nil {
		return x.SurveyPageId
	}
	return 0
}

func (x *SurveyLogicPageSource) GetComparison() SurveyLogicPageSourceComparisonType {
	if x != nil {
		return x.Comparison
	}
	return SurveyLogicPageSourceComparisonType_LOGIC_PAGE_SOURCE_COMPARISON_ALL_UNSPECIFIED
}

func (x *SurveyLogicPageSource) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SurveyLogicPageSource) GetFromSurveyQuestionId() int32 {
	if x != nil {
		return x.FromSurveyQuestionId
	}
	return 0
}

type SurveyLogicPageGate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int32                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SurveyPageId            int32                             `protobuf:"varint,2,opt,name=survey_page_id,json=surveyPageId,proto3" json:"survey_page_id,omitempty"`
	Comparison              SurveyLogicPageGateComparisonType `protobuf:"varint,3,opt,name=comparison,proto3,enum=web.survey.v1.SurveyLogicPageGateComparisonType" json:"comparison,omitempty"`
	From_1Selector          SurveyLogicPageGateFromType       `protobuf:"varint,4,opt,name=from_1_selector,json=from1Selector,proto3,enum=web.survey.v1.SurveyLogicPageGateFromType" json:"from_1_selector,omitempty"`
	From_1LogicPageSourceId int32                             `protobuf:"varint,5,opt,name=from_1_logic_page_source_id,json=from1LogicPageSourceId,proto3" json:"from_1_logic_page_source_id,omitempty"`
	From_1LogicPageGateId   int32                             `protobuf:"varint,6,opt,name=from_1_logic_page_gate_id,json=from1LogicPageGateId,proto3" json:"from_1_logic_page_gate_id,omitempty"`
	From_2Selector          SurveyLogicPageGateFromType       `protobuf:"varint,7,opt,name=from_2_selector,json=from2Selector,proto3,enum=web.survey.v1.SurveyLogicPageGateFromType" json:"from_2_selector,omitempty"`
	From_2LogicPageSourceId int32                             `protobuf:"varint,8,opt,name=from_2_logic_page_source_id,json=from2LogicPageSourceId,proto3" json:"from_2_logic_page_source_id,omitempty"`
	From_2LogicPageGateId   int32                             `protobuf:"varint,9,opt,name=from_2_logic_page_gate_id,json=from2LogicPageGateId,proto3" json:"from_2_logic_page_gate_id,omitempty"`
}

func (x *SurveyLogicPageGate) Reset() {
	*x = SurveyLogicPageGate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyLogicPageGate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyLogicPageGate) ProtoMessage() {}

func (x *SurveyLogicPageGate) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyLogicPageGate.ProtoReflect.Descriptor instead.
func (*SurveyLogicPageGate) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{8}
}

func (x *SurveyLogicPageGate) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SurveyLogicPageGate) GetSurveyPageId() int32 {
	if x != nil {
		return x.SurveyPageId
	}
	return 0
}

func (x *SurveyLogicPageGate) GetComparison() SurveyLogicPageGateComparisonType {
	if x != nil {
		return x.Comparison
	}
	return SurveyLogicPageGateComparisonType_LOGIC_PAGE_GATE_COMPARISON_ALL_UNSPECIFIED
}

func (x *SurveyLogicPageGate) GetFrom_1Selector() SurveyLogicPageGateFromType {
	if x != nil {
		return x.From_1Selector
	}
	return SurveyLogicPageGateFromType_LOGIC_PAGE_GATE_FROM_ALL_UNSPECIFIED
}

func (x *SurveyLogicPageGate) GetFrom_1LogicPageSourceId() int32 {
	if x != nil {
		return x.From_1LogicPageSourceId
	}
	return 0
}

func (x *SurveyLogicPageGate) GetFrom_1LogicPageGateId() int32 {
	if x != nil {
		return x.From_1LogicPageGateId
	}
	return 0
}

func (x *SurveyLogicPageGate) GetFrom_2Selector() SurveyLogicPageGateFromType {
	if x != nil {
		return x.From_2Selector
	}
	return SurveyLogicPageGateFromType_LOGIC_PAGE_GATE_FROM_ALL_UNSPECIFIED
}

func (x *SurveyLogicPageGate) GetFrom_2LogicPageSourceId() int32 {
	if x != nil {
		return x.From_2LogicPageSourceId
	}
	return 0
}

func (x *SurveyLogicPageGate) GetFrom_2LogicPageGateId() int32 {
	if x != nil {
		return x.From_2LogicPageGateId
	}
	return 0
}

type SurveyLogicPageAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int32                         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SurveyPageId          int32                         `protobuf:"varint,2,opt,name=survey_page_id,json=surveyPageId,proto3" json:"survey_page_id,omitempty"`
	Priority              int32                         `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	FromSelector          SurveyLogicPageActionFromType `protobuf:"varint,4,opt,name=from_selector,json=fromSelector,proto3,enum=web.survey.v1.SurveyLogicPageActionFromType" json:"from_selector,omitempty"`
	FromLogicPageSourceId int32                         `protobuf:"varint,5,opt,name=from_logic_page_source_id,json=fromLogicPageSourceId,proto3" json:"from_logic_page_source_id,omitempty"`
	FromLogicPageGateId   int32                         `protobuf:"varint,6,opt,name=from_logic_page_gate_id,json=fromLogicPageGateId,proto3" json:"from_logic_page_gate_id,omitempty"`
	ToSelector            SurveyLogicPageActionToType   `protobuf:"varint,7,opt,name=to_selector,json=toSelector,proto3,enum=web.survey.v1.SurveyLogicPageActionToType" json:"to_selector,omitempty"`
	ToDisqualified        bool                          `protobuf:"varint,8,opt,name=to_disqualified,json=toDisqualified,proto3" json:"to_disqualified,omitempty"`
	ToSurveyPageId        int32                         `protobuf:"varint,9,opt,name=to_survey_page_id,json=toSurveyPageId,proto3" json:"to_survey_page_id,omitempty"`
}

func (x *SurveyLogicPageAction) Reset() {
	*x = SurveyLogicPageAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_web_survey_v1_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyLogicPageAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyLogicPageAction) ProtoMessage() {}

func (x *SurveyLogicPageAction) ProtoReflect() protoreflect.Message {
	mi := &file_web_survey_v1_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyLogicPageAction.ProtoReflect.Descriptor instead.
func (*SurveyLogicPageAction) Descriptor() ([]byte, []int) {
	return file_web_survey_v1_types_proto_rawDescGZIP(), []int{9}
}

func (x *SurveyLogicPageAction) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SurveyLogicPageAction) GetSurveyPageId() int32 {
	if x != nil {
		return x.SurveyPageId
	}
	return 0
}

func (x *SurveyLogicPageAction) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SurveyLogicPageAction) GetFromSelector() SurveyLogicPageActionFromType {
	if x != nil {
		return x.FromSelector
	}
	return SurveyLogicPageActionFromType_LOGIC_PAGE_ACTION_FROM_ALL_UNSPECIFIED
}

func (x *SurveyLogicPageAction) GetFromLogicPageSourceId() int32 {
	if x != nil {
		return x.FromLogicPageSourceId
	}
	return 0
}

func (x *SurveyLogicPageAction) GetFromLogicPageGateId() int32 {
	if x != nil {
		return x.FromLogicPageGateId
	}
	return 0
}

func (x *SurveyLogicPageAction) GetToSelector() SurveyLogicPageActionToType {
	if x != nil {
		return x.ToSelector
	}
	return SurveyLogicPageActionToType_LOGIC_PAGE_ACTION_TO_ALL_UNSPECIFIED
}

func (x *SurveyLogicPageAction) GetToDisqualified() bool {
	if x != nil {
		return x.ToDisqualified
	}
	return false
}

func (x *SurveyLogicPageAction) GetToSurveyPageId() int32 {
	if x != nil {
		return x.ToSurveyPageId
	}
	return 0
}

var File_web_survey_v1_types_proto protoreflect.FileDescriptor

var file_web_survey_v1_types_proto_rawDesc = []byte{
	0x0a, 0x19, 0x77, 0x65, 0x62, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x77, 0x65, 0x62,
	0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x02, 0x0a, 0x06,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a,
	0x10, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x8e, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0xa5, 0x02, 0x0a, 0x0e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x35,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x77,
	0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0xc6, 0x02, 0x0a, 0x14, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x73, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x69, 0x73, 0x54, 0x65, 0x78, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x54, 0x65, 0x78, 0x74, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x30, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x55,
	0x72, 0x6c, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb7, 0x02, 0x0a, 0x0e, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x72, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x41, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x22, 0xc7, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xee, 0x01, 0x0a, 0x15,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x32, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xb1, 0x04, 0x0a,
	0x13, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65,
	0x47, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x0f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x31, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x31, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x3b, 0x0a, 0x1b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x31, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x66, 0x72, 0x6f, 0x6d, 0x31, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x50, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a,
	0x19, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x31, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d, 0x31, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65,
	0x47, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x32,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x66, 0x72, 0x6f,
	0x6d, 0x32, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x1b, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x32, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x16, 0x66, 0x72, 0x6f, 0x6d, 0x32, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x19, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x32, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x66, 0x72, 0x6f, 0x6d,
	0x32, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x49, 0x64,
	0x22, 0xcd, 0x03, 0x0a, 0x15, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x0d,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50,
	0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x38, 0x0a, 0x19, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x17, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x66, 0x72, 0x6f, 0x6d,
	0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x4b, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x77, 0x65, 0x62, 0x2e, 0x73, 0x75, 0x72, 0x76, 0x65,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63,
	0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x74, 0x6f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x6f, 0x5f, 0x64, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x6f, 0x44, 0x69, 0x73, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x74, 0x6f, 0x5f, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x74, 0x6f, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x50, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x2a, 0x59, 0x0a, 0x0a, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x55, 0x52, 0x56, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c,
	0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x55, 0x52, 0x56, 0x45, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x55, 0x52, 0x56, 0x45, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x49, 0x5a, 0x10, 0x02, 0x2a, 0xde, 0x02, 0x0a, 0x12,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x42, 0x4f, 0x58, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04,
	0x12, 0x19, 0x0a, 0x15, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x57, 0x45, 0x42, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x41, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x07, 0x12, 0x1a, 0x0a,
	0x16, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x50, 0x4c, 0x4f, 0x41,
	0x44, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0x0a,
	0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x0b, 0x2a, 0xa9, 0x01, 0x0a,
	0x23, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x2c, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41,
	0x47, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52,
	0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f,
	0x50, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x28,
	0x0a, 0x24, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x2a, 0xac, 0x02, 0x0a, 0x21, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x2a, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x4e, 0x44,
	0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x47, 0x45,
	0x5f, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e,
	0x5f, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50,
	0x41, 0x47, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49,
	0x53, 0x4f, 0x4e, 0x5f, 0x58, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x4f, 0x47,
	0x49, 0x43, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x22,
	0x0a, 0x1e, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x52,
	0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x47, 0x45,
	0x5f, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x49, 0x53, 0x4f, 0x4e,
	0x5f, 0x58, 0x4e, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0x87, 0x01, 0x0a, 0x1b, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x47, 0x61, 0x74, 0x65, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x4f, 0x47, 0x49, 0x43,
	0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
	0x41, 0x4c, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f,
	0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x47, 0x45,
	0x5f, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x2a, 0x8f, 0x01, 0x0a, 0x1d, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x26, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x47,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x41, 0x4c,
	0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x47, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x2a, 0x97, 0x01, 0x0a, 0x1b, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x4c, 0x6f,
	0x67, 0x69, 0x63, 0x50, 0x61, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x47,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x4c, 0x4c, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x49, 0x53, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x5f, 0x50, 0x41,
	0x47, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x55, 0x52,
	0x56, 0x45, 0x59, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x42, 0x54, 0x5a,
	0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x64, 0x65, 0x61,
	0x74, 0x65, 0x63, 0x68, 0x2d, 0x64, 0x65, 0x76, 0x2f, 0x69, 0x64, 0x65, 0x61, 0x74, 0x65, 0x63,
	0x68, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2d, 0x67, 0x6f, 0x2f, 0x77, 0x65, 0x62, 0x2f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x2f, 0x76,
	0x31, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x77, 0x65, 0x62, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_web_survey_v1_types_proto_rawDescOnce sync.Once
	file_web_survey_v1_types_proto_rawDescData = file_web_survey_v1_types_proto_rawDesc
)

func file_web_survey_v1_types_proto_rawDescGZIP() []byte {
	file_web_survey_v1_types_proto_rawDescOnce.Do(func() {
		file_web_survey_v1_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_web_survey_v1_types_proto_rawDescData)
	})
	return file_web_survey_v1_types_proto_rawDescData
}

var file_web_survey_v1_types_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_web_survey_v1_types_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_web_survey_v1_types_proto_goTypes = []interface{}{
	(SurveyType)(0),                          // 0: web.survey.v1.SurveyType
	(SurveyQuestionType)(0),                  // 1: web.survey.v1.SurveyQuestionType
	(SurveyLogicPageSourceComparisonType)(0), // 2: web.survey.v1.SurveyLogicPageSourceComparisonType
	(SurveyLogicPageGateComparisonType)(0),   // 3: web.survey.v1.SurveyLogicPageGateComparisonType
	(SurveyLogicPageGateFromType)(0),         // 4: web.survey.v1.SurveyLogicPageGateFromType
	(SurveyLogicPageActionFromType)(0),       // 5: web.survey.v1.SurveyLogicPageActionFromType
	(SurveyLogicPageActionToType)(0),         // 6: web.survey.v1.SurveyLogicPageActionToType
	(*Survey)(nil),                           // 7: web.survey.v1.Survey
	(*SurveyPage)(nil),                       // 8: web.survey.v1.SurveyPage
	(*SurveyQuestion)(nil),                   // 9: web.survey.v1.SurveyQuestion
	(*SurveyQuestionOption)(nil),             // 10: web.survey.v1.SurveyQuestionOption
	(*SurveyChoice)(nil),                     // 11: web.survey.v1.SurveyChoice
	(*SurveyResponse)(nil),                   // 12: web.survey.v1.SurveyResponse
	(*SurveyResponseAnswer)(nil),             // 13: web.survey.v1.SurveyResponseAnswer
	(*SurveyLogicPageSource)(nil),            // 14: web.survey.v1.SurveyLogicPageSource
	(*SurveyLogicPageGate)(nil),              // 15: web.survey.v1.SurveyLogicPageGate
	(*SurveyLogicPageAction)(nil),            // 16: web.survey.v1.SurveyLogicPageAction
	(*timestamppb.Timestamp)(nil),            // 17: google.protobuf.Timestamp
}
var file_web_survey_v1_types_proto_depIdxs = []int32{
	17, // 0: web.survey.v1.Survey.datetime_created:type_name -> google.protobuf.Timestamp
	17, // 1: web.survey.v1.Survey.datetime_updated:type_name -> google.protobuf.Timestamp
	0,  // 2: web.survey.v1.Survey.type:type_name -> web.survey.v1.SurveyType
	9,  // 3: web.survey.v1.SurveyPage.questions:type_name -> web.survey.v1.SurveyQuestion
	1,  // 4: web.survey.v1.SurveyQuestion.type:type_name -> web.survey.v1.SurveyQuestionType
	10, // 5: web.survey.v1.SurveyQuestion.option:type_name -> web.survey.v1.SurveyQuestionOption
	11, // 6: web.survey.v1.SurveyQuestion.choices:type_name -> web.survey.v1.SurveyChoice
	17, // 7: web.survey.v1.SurveyResponse.datetime_start:type_name -> google.protobuf.Timestamp
	17, // 8: web.survey.v1.SurveyResponse.datetime_end:type_name -> google.protobuf.Timestamp
	17, // 9: web.survey.v1.SurveyResponseAnswer.datetime_created:type_name -> google.protobuf.Timestamp
	2,  // 10: web.survey.v1.SurveyLogicPageSource.comparison:type_name -> web.survey.v1.SurveyLogicPageSourceComparisonType
	3,  // 11: web.survey.v1.SurveyLogicPageGate.comparison:type_name -> web.survey.v1.SurveyLogicPageGateComparisonType
	4,  // 12: web.survey.v1.SurveyLogicPageGate.from_1_selector:type_name -> web.survey.v1.SurveyLogicPageGateFromType
	4,  // 13: web.survey.v1.SurveyLogicPageGate.from_2_selector:type_name -> web.survey.v1.SurveyLogicPageGateFromType
	5,  // 14: web.survey.v1.SurveyLogicPageAction.from_selector:type_name -> web.survey.v1.SurveyLogicPageActionFromType
	6,  // 15: web.survey.v1.SurveyLogicPageAction.to_selector:type_name -> web.survey.v1.SurveyLogicPageActionToType
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_web_survey_v1_types_proto_init() }
func file_web_survey_v1_types_proto_init() {
	if File_web_survey_v1_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_web_survey_v1_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Survey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyQuestionOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyResponseAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyLogicPageSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyLogicPageGate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_web_survey_v1_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyLogicPageAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_web_survey_v1_types_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_web_survey_v1_types_proto_goTypes,
		DependencyIndexes: file_web_survey_v1_types_proto_depIdxs,
		EnumInfos:         file_web_survey_v1_types_proto_enumTypes,
		MessageInfos:      file_web_survey_v1_types_proto_msgTypes,
	}.Build()
	File_web_survey_v1_types_proto = out.File
	file_web_survey_v1_types_proto_rawDesc = nil
	file_web_survey_v1_types_proto_goTypes = nil
	file_web_survey_v1_types_proto_depIdxs = nil
}
