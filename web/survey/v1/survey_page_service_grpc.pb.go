// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcweb_survey_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SurveyPageServiceClient is the client API for SurveyPageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyPageServiceClient interface {
	PageGetOne(ctx context.Context, in *PageGetOneRequest, opts ...grpc.CallOption) (*PageGetOneResponse, error)
	PageGetAll(ctx context.Context, in *PageGetAllRequest, opts ...grpc.CallOption) (*PageGetAllResponse, error)
	PageCreate(ctx context.Context, in *PageCreateRequest, opts ...grpc.CallOption) (*PageCreateResponse, error)
	PageDelete(ctx context.Context, in *PageDeleteRequest, opts ...grpc.CallOption) (*PageDeleteResponse, error)
}

type surveyPageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyPageServiceClient(cc grpc.ClientConnInterface) SurveyPageServiceClient {
	return &surveyPageServiceClient{cc}
}

func (c *surveyPageServiceClient) PageGetOne(ctx context.Context, in *PageGetOneRequest, opts ...grpc.CallOption) (*PageGetOneResponse, error) {
	out := new(PageGetOneResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyPageService/PageGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyPageServiceClient) PageGetAll(ctx context.Context, in *PageGetAllRequest, opts ...grpc.CallOption) (*PageGetAllResponse, error) {
	out := new(PageGetAllResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyPageService/PageGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyPageServiceClient) PageCreate(ctx context.Context, in *PageCreateRequest, opts ...grpc.CallOption) (*PageCreateResponse, error) {
	out := new(PageCreateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyPageService/PageCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyPageServiceClient) PageDelete(ctx context.Context, in *PageDeleteRequest, opts ...grpc.CallOption) (*PageDeleteResponse, error) {
	out := new(PageDeleteResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyPageService/PageDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyPageServiceServer is the server API for SurveyPageService service.
// All implementations must embed UnimplementedSurveyPageServiceServer
// for forward compatibility
type SurveyPageServiceServer interface {
	PageGetOne(context.Context, *PageGetOneRequest) (*PageGetOneResponse, error)
	PageGetAll(context.Context, *PageGetAllRequest) (*PageGetAllResponse, error)
	PageCreate(context.Context, *PageCreateRequest) (*PageCreateResponse, error)
	PageDelete(context.Context, *PageDeleteRequest) (*PageDeleteResponse, error)
	mustEmbedUnimplementedSurveyPageServiceServer()
}

// UnimplementedSurveyPageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyPageServiceServer struct {
}

func (UnimplementedSurveyPageServiceServer) PageGetOne(context.Context, *PageGetOneRequest) (*PageGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageGetOne not implemented")
}
func (UnimplementedSurveyPageServiceServer) PageGetAll(context.Context, *PageGetAllRequest) (*PageGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageGetAll not implemented")
}
func (UnimplementedSurveyPageServiceServer) PageCreate(context.Context, *PageCreateRequest) (*PageCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageCreate not implemented")
}
func (UnimplementedSurveyPageServiceServer) PageDelete(context.Context, *PageDeleteRequest) (*PageDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageDelete not implemented")
}
func (UnimplementedSurveyPageServiceServer) mustEmbedUnimplementedSurveyPageServiceServer() {}

// UnsafeSurveyPageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyPageServiceServer will
// result in compilation errors.
type UnsafeSurveyPageServiceServer interface {
	mustEmbedUnimplementedSurveyPageServiceServer()
}

func RegisterSurveyPageServiceServer(s grpc.ServiceRegistrar, srv SurveyPageServiceServer) {
	s.RegisterService(&SurveyPageService_ServiceDesc, srv)
}

func _SurveyPageService_PageGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyPageServiceServer).PageGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyPageService/PageGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyPageServiceServer).PageGetOne(ctx, req.(*PageGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyPageService_PageGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyPageServiceServer).PageGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyPageService/PageGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyPageServiceServer).PageGetAll(ctx, req.(*PageGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyPageService_PageCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyPageServiceServer).PageCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyPageService/PageCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyPageServiceServer).PageCreate(ctx, req.(*PageCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyPageService_PageDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyPageServiceServer).PageDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyPageService/PageDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyPageServiceServer).PageDelete(ctx, req.(*PageDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyPageService_ServiceDesc is the grpc.ServiceDesc for SurveyPageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyPageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "web.survey.v1.SurveyPageService",
	HandlerType: (*SurveyPageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PageGetOne",
			Handler:    _SurveyPageService_PageGetOne_Handler,
		},
		{
			MethodName: "PageGetAll",
			Handler:    _SurveyPageService_PageGetAll_Handler,
		},
		{
			MethodName: "PageCreate",
			Handler:    _SurveyPageService_PageCreate_Handler,
		},
		{
			MethodName: "PageDelete",
			Handler:    _SurveyPageService_PageDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web/survey/v1/survey_page_service.proto",
}
