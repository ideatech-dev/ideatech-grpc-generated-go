// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpcweb_survey_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SurveyQuestionServiceClient is the client API for SurveyQuestionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SurveyQuestionServiceClient interface {
	QuestionGetOne(ctx context.Context, in *QuestionGetOneRequest, opts ...grpc.CallOption) (*QuestionGetOneResponse, error)
	QuestionGetAll(ctx context.Context, in *QuestionGetAllRequest, opts ...grpc.CallOption) (*QuestionGetAllResponse, error)
	QuestionCreate(ctx context.Context, in *QuestionCreateRequest, opts ...grpc.CallOption) (*QuestionCreateResponse, error)
	QuestionUpdate(ctx context.Context, in *QuestionUpdateRequest, opts ...grpc.CallOption) (*QuestionUpdateResponse, error)
	QuestionDelete(ctx context.Context, in *QuestionDeleteRequest, opts ...grpc.CallOption) (*QuestionDeleteResponse, error)
	ChoiceGetAll(ctx context.Context, in *ChoiceGetAllRequest, opts ...grpc.CallOption) (*ChoiceGetAllResponse, error)
	ChoiceCreate(ctx context.Context, in *ChoiceCreateRequest, opts ...grpc.CallOption) (*ChoiceCreateResponse, error)
	ChoiceUpdate(ctx context.Context, in *ChoiceUpdateRequest, opts ...grpc.CallOption) (*ChoiceUpdateResponse, error)
	ChoiceDelete(ctx context.Context, in *ChoiceDeleteRequest, opts ...grpc.CallOption) (*ChoiceDeleteResponse, error)
}

type surveyQuestionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSurveyQuestionServiceClient(cc grpc.ClientConnInterface) SurveyQuestionServiceClient {
	return &surveyQuestionServiceClient{cc}
}

func (c *surveyQuestionServiceClient) QuestionGetOne(ctx context.Context, in *QuestionGetOneRequest, opts ...grpc.CallOption) (*QuestionGetOneResponse, error) {
	out := new(QuestionGetOneResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyQuestionService/QuestionGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyQuestionServiceClient) QuestionGetAll(ctx context.Context, in *QuestionGetAllRequest, opts ...grpc.CallOption) (*QuestionGetAllResponse, error) {
	out := new(QuestionGetAllResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyQuestionService/QuestionGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyQuestionServiceClient) QuestionCreate(ctx context.Context, in *QuestionCreateRequest, opts ...grpc.CallOption) (*QuestionCreateResponse, error) {
	out := new(QuestionCreateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyQuestionService/QuestionCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyQuestionServiceClient) QuestionUpdate(ctx context.Context, in *QuestionUpdateRequest, opts ...grpc.CallOption) (*QuestionUpdateResponse, error) {
	out := new(QuestionUpdateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyQuestionService/QuestionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyQuestionServiceClient) QuestionDelete(ctx context.Context, in *QuestionDeleteRequest, opts ...grpc.CallOption) (*QuestionDeleteResponse, error) {
	out := new(QuestionDeleteResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyQuestionService/QuestionDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyQuestionServiceClient) ChoiceGetAll(ctx context.Context, in *ChoiceGetAllRequest, opts ...grpc.CallOption) (*ChoiceGetAllResponse, error) {
	out := new(ChoiceGetAllResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyQuestionService/ChoiceGetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyQuestionServiceClient) ChoiceCreate(ctx context.Context, in *ChoiceCreateRequest, opts ...grpc.CallOption) (*ChoiceCreateResponse, error) {
	out := new(ChoiceCreateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyQuestionService/ChoiceCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyQuestionServiceClient) ChoiceUpdate(ctx context.Context, in *ChoiceUpdateRequest, opts ...grpc.CallOption) (*ChoiceUpdateResponse, error) {
	out := new(ChoiceUpdateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyQuestionService/ChoiceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *surveyQuestionServiceClient) ChoiceDelete(ctx context.Context, in *ChoiceDeleteRequest, opts ...grpc.CallOption) (*ChoiceDeleteResponse, error) {
	out := new(ChoiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.SurveyQuestionService/ChoiceDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SurveyQuestionServiceServer is the server API for SurveyQuestionService service.
// All implementations must embed UnimplementedSurveyQuestionServiceServer
// for forward compatibility
type SurveyQuestionServiceServer interface {
	QuestionGetOne(context.Context, *QuestionGetOneRequest) (*QuestionGetOneResponse, error)
	QuestionGetAll(context.Context, *QuestionGetAllRequest) (*QuestionGetAllResponse, error)
	QuestionCreate(context.Context, *QuestionCreateRequest) (*QuestionCreateResponse, error)
	QuestionUpdate(context.Context, *QuestionUpdateRequest) (*QuestionUpdateResponse, error)
	QuestionDelete(context.Context, *QuestionDeleteRequest) (*QuestionDeleteResponse, error)
	ChoiceGetAll(context.Context, *ChoiceGetAllRequest) (*ChoiceGetAllResponse, error)
	ChoiceCreate(context.Context, *ChoiceCreateRequest) (*ChoiceCreateResponse, error)
	ChoiceUpdate(context.Context, *ChoiceUpdateRequest) (*ChoiceUpdateResponse, error)
	ChoiceDelete(context.Context, *ChoiceDeleteRequest) (*ChoiceDeleteResponse, error)
	mustEmbedUnimplementedSurveyQuestionServiceServer()
}

// UnimplementedSurveyQuestionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSurveyQuestionServiceServer struct {
}

func (UnimplementedSurveyQuestionServiceServer) QuestionGetOne(context.Context, *QuestionGetOneRequest) (*QuestionGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestionGetOne not implemented")
}
func (UnimplementedSurveyQuestionServiceServer) QuestionGetAll(context.Context, *QuestionGetAllRequest) (*QuestionGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestionGetAll not implemented")
}
func (UnimplementedSurveyQuestionServiceServer) QuestionCreate(context.Context, *QuestionCreateRequest) (*QuestionCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestionCreate not implemented")
}
func (UnimplementedSurveyQuestionServiceServer) QuestionUpdate(context.Context, *QuestionUpdateRequest) (*QuestionUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestionUpdate not implemented")
}
func (UnimplementedSurveyQuestionServiceServer) QuestionDelete(context.Context, *QuestionDeleteRequest) (*QuestionDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuestionDelete not implemented")
}
func (UnimplementedSurveyQuestionServiceServer) ChoiceGetAll(context.Context, *ChoiceGetAllRequest) (*ChoiceGetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChoiceGetAll not implemented")
}
func (UnimplementedSurveyQuestionServiceServer) ChoiceCreate(context.Context, *ChoiceCreateRequest) (*ChoiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChoiceCreate not implemented")
}
func (UnimplementedSurveyQuestionServiceServer) ChoiceUpdate(context.Context, *ChoiceUpdateRequest) (*ChoiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChoiceUpdate not implemented")
}
func (UnimplementedSurveyQuestionServiceServer) ChoiceDelete(context.Context, *ChoiceDeleteRequest) (*ChoiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChoiceDelete not implemented")
}
func (UnimplementedSurveyQuestionServiceServer) mustEmbedUnimplementedSurveyQuestionServiceServer() {}

// UnsafeSurveyQuestionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SurveyQuestionServiceServer will
// result in compilation errors.
type UnsafeSurveyQuestionServiceServer interface {
	mustEmbedUnimplementedSurveyQuestionServiceServer()
}

func RegisterSurveyQuestionServiceServer(s grpc.ServiceRegistrar, srv SurveyQuestionServiceServer) {
	s.RegisterService(&SurveyQuestionService_ServiceDesc, srv)
}

func _SurveyQuestionService_QuestionGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyQuestionServiceServer).QuestionGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyQuestionService/QuestionGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyQuestionServiceServer).QuestionGetOne(ctx, req.(*QuestionGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyQuestionService_QuestionGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyQuestionServiceServer).QuestionGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyQuestionService/QuestionGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyQuestionServiceServer).QuestionGetAll(ctx, req.(*QuestionGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyQuestionService_QuestionCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyQuestionServiceServer).QuestionCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyQuestionService/QuestionCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyQuestionServiceServer).QuestionCreate(ctx, req.(*QuestionCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyQuestionService_QuestionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyQuestionServiceServer).QuestionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyQuestionService/QuestionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyQuestionServiceServer).QuestionUpdate(ctx, req.(*QuestionUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyQuestionService_QuestionDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyQuestionServiceServer).QuestionDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyQuestionService/QuestionDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyQuestionServiceServer).QuestionDelete(ctx, req.(*QuestionDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyQuestionService_ChoiceGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChoiceGetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyQuestionServiceServer).ChoiceGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyQuestionService/ChoiceGetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyQuestionServiceServer).ChoiceGetAll(ctx, req.(*ChoiceGetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyQuestionService_ChoiceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChoiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyQuestionServiceServer).ChoiceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyQuestionService/ChoiceCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyQuestionServiceServer).ChoiceCreate(ctx, req.(*ChoiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyQuestionService_ChoiceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChoiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyQuestionServiceServer).ChoiceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyQuestionService/ChoiceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyQuestionServiceServer).ChoiceUpdate(ctx, req.(*ChoiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SurveyQuestionService_ChoiceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChoiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SurveyQuestionServiceServer).ChoiceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.SurveyQuestionService/ChoiceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SurveyQuestionServiceServer).ChoiceDelete(ctx, req.(*ChoiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SurveyQuestionService_ServiceDesc is the grpc.ServiceDesc for SurveyQuestionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SurveyQuestionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "web.survey.v1.SurveyQuestionService",
	HandlerType: (*SurveyQuestionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QuestionGetOne",
			Handler:    _SurveyQuestionService_QuestionGetOne_Handler,
		},
		{
			MethodName: "QuestionGetAll",
			Handler:    _SurveyQuestionService_QuestionGetAll_Handler,
		},
		{
			MethodName: "QuestionCreate",
			Handler:    _SurveyQuestionService_QuestionCreate_Handler,
		},
		{
			MethodName: "QuestionUpdate",
			Handler:    _SurveyQuestionService_QuestionUpdate_Handler,
		},
		{
			MethodName: "QuestionDelete",
			Handler:    _SurveyQuestionService_QuestionDelete_Handler,
		},
		{
			MethodName: "ChoiceGetAll",
			Handler:    _SurveyQuestionService_ChoiceGetAll_Handler,
		},
		{
			MethodName: "ChoiceCreate",
			Handler:    _SurveyQuestionService_ChoiceCreate_Handler,
		},
		{
			MethodName: "ChoiceUpdate",
			Handler:    _SurveyQuestionService_ChoiceUpdate_Handler,
		},
		{
			MethodName: "ChoiceDelete",
			Handler:    _SurveyQuestionService_ChoiceDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web/survey/v1/survey_question_service.proto",
}
