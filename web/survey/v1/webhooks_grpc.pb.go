// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.2
// source: web/survey/v1/webhooks.proto

package grpcweb_survey_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebhookServiceClient is the client API for WebhookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebhookServiceClient interface {
	WebhookGetOne(ctx context.Context, in *WebhookGetOneRequest, opts ...grpc.CallOption) (*WebhookGetOneResponse, error)
	WebhookCreate(ctx context.Context, in *WebhookCreateRequest, opts ...grpc.CallOption) (*WebhookCreateResponse, error)
	WebhookUpdate(ctx context.Context, in *WebhookUpdateRequest, opts ...grpc.CallOption) (*WebhookUpdateResponse, error)
	WebhookDelete(ctx context.Context, in *WebhookDeleteRequest, opts ...grpc.CallOption) (*WebhookDeleteResponse, error)
}

type webhookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebhookServiceClient(cc grpc.ClientConnInterface) WebhookServiceClient {
	return &webhookServiceClient{cc}
}

func (c *webhookServiceClient) WebhookGetOne(ctx context.Context, in *WebhookGetOneRequest, opts ...grpc.CallOption) (*WebhookGetOneResponse, error) {
	out := new(WebhookGetOneResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.WebhookService/WebhookGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) WebhookCreate(ctx context.Context, in *WebhookCreateRequest, opts ...grpc.CallOption) (*WebhookCreateResponse, error) {
	out := new(WebhookCreateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.WebhookService/WebhookCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) WebhookUpdate(ctx context.Context, in *WebhookUpdateRequest, opts ...grpc.CallOption) (*WebhookUpdateResponse, error) {
	out := new(WebhookUpdateResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.WebhookService/WebhookUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webhookServiceClient) WebhookDelete(ctx context.Context, in *WebhookDeleteRequest, opts ...grpc.CallOption) (*WebhookDeleteResponse, error) {
	out := new(WebhookDeleteResponse)
	err := c.cc.Invoke(ctx, "/web.survey.v1.WebhookService/WebhookDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebhookServiceServer is the server API for WebhookService service.
// All implementations must embed UnimplementedWebhookServiceServer
// for forward compatibility
type WebhookServiceServer interface {
	WebhookGetOne(context.Context, *WebhookGetOneRequest) (*WebhookGetOneResponse, error)
	WebhookCreate(context.Context, *WebhookCreateRequest) (*WebhookCreateResponse, error)
	WebhookUpdate(context.Context, *WebhookUpdateRequest) (*WebhookUpdateResponse, error)
	WebhookDelete(context.Context, *WebhookDeleteRequest) (*WebhookDeleteResponse, error)
	mustEmbedUnimplementedWebhookServiceServer()
}

// UnimplementedWebhookServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebhookServiceServer struct {
}

func (UnimplementedWebhookServiceServer) WebhookGetOne(context.Context, *WebhookGetOneRequest) (*WebhookGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookGetOne not implemented")
}
func (UnimplementedWebhookServiceServer) WebhookCreate(context.Context, *WebhookCreateRequest) (*WebhookCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookCreate not implemented")
}
func (UnimplementedWebhookServiceServer) WebhookUpdate(context.Context, *WebhookUpdateRequest) (*WebhookUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookUpdate not implemented")
}
func (UnimplementedWebhookServiceServer) WebhookDelete(context.Context, *WebhookDeleteRequest) (*WebhookDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebhookDelete not implemented")
}
func (UnimplementedWebhookServiceServer) mustEmbedUnimplementedWebhookServiceServer() {}

// UnsafeWebhookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebhookServiceServer will
// result in compilation errors.
type UnsafeWebhookServiceServer interface {
	mustEmbedUnimplementedWebhookServiceServer()
}

func RegisterWebhookServiceServer(s grpc.ServiceRegistrar, srv WebhookServiceServer) {
	s.RegisterService(&WebhookService_ServiceDesc, srv)
}

func _WebhookService_WebhookGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).WebhookGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.WebhookService/WebhookGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).WebhookGetOne(ctx, req.(*WebhookGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_WebhookCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).WebhookCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.WebhookService/WebhookCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).WebhookCreate(ctx, req.(*WebhookCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_WebhookUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).WebhookUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.WebhookService/WebhookUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).WebhookUpdate(ctx, req.(*WebhookUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebhookService_WebhookDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebhookDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebhookServiceServer).WebhookDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.survey.v1.WebhookService/WebhookDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebhookServiceServer).WebhookDelete(ctx, req.(*WebhookDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebhookService_ServiceDesc is the grpc.ServiceDesc for WebhookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebhookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "web.survey.v1.WebhookService",
	HandlerType: (*WebhookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WebhookGetOne",
			Handler:    _WebhookService_WebhookGetOne_Handler,
		},
		{
			MethodName: "WebhookCreate",
			Handler:    _WebhookService_WebhookCreate_Handler,
		},
		{
			MethodName: "WebhookUpdate",
			Handler:    _WebhookService_WebhookUpdate_Handler,
		},
		{
			MethodName: "WebhookDelete",
			Handler:    _WebhookService_WebhookDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web/survey/v1/webhooks.proto",
}
